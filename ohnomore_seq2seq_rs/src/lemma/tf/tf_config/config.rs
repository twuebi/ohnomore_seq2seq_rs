// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct GPUOptions {
    // message fields
    pub per_process_gpu_memory_fraction: f64,
    pub allow_growth: bool,
    pub allocator_type: ::std::string::String,
    pub deferred_deletion_bytes: i64,
    pub visible_device_list: ::std::string::String,
    pub polling_active_delay_usecs: i32,
    pub polling_inactive_delay_msecs: i32,
    pub force_gpu_compatible: bool,
    pub experimental: ::protobuf::SingularPtrField<GPUOptions_Experimental>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GPUOptions {
    pub fn new() -> GPUOptions {
        ::std::default::Default::default()
    }

    // double per_process_gpu_memory_fraction = 1;

    pub fn clear_per_process_gpu_memory_fraction(&mut self) {
        self.per_process_gpu_memory_fraction = 0.;
    }

    // Param is passed by value, moved
    pub fn set_per_process_gpu_memory_fraction(&mut self, v: f64) {
        self.per_process_gpu_memory_fraction = v;
    }

    pub fn get_per_process_gpu_memory_fraction(&self) -> f64 {
        self.per_process_gpu_memory_fraction
    }

    // bool allow_growth = 4;

    pub fn clear_allow_growth(&mut self) {
        self.allow_growth = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_growth(&mut self, v: bool) {
        self.allow_growth = v;
    }

    pub fn get_allow_growth(&self) -> bool {
        self.allow_growth
    }

    // string allocator_type = 2;

    pub fn clear_allocator_type(&mut self) {
        self.allocator_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_allocator_type(&mut self, v: ::std::string::String) {
        self.allocator_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_allocator_type(&mut self) -> &mut ::std::string::String {
        &mut self.allocator_type
    }

    // Take field
    pub fn take_allocator_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.allocator_type, ::std::string::String::new())
    }

    pub fn get_allocator_type(&self) -> &str {
        &self.allocator_type
    }

    // int64 deferred_deletion_bytes = 3;

    pub fn clear_deferred_deletion_bytes(&mut self) {
        self.deferred_deletion_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_deferred_deletion_bytes(&mut self, v: i64) {
        self.deferred_deletion_bytes = v;
    }

    pub fn get_deferred_deletion_bytes(&self) -> i64 {
        self.deferred_deletion_bytes
    }

    // string visible_device_list = 5;

    pub fn clear_visible_device_list(&mut self) {
        self.visible_device_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_visible_device_list(&mut self, v: ::std::string::String) {
        self.visible_device_list = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_visible_device_list(&mut self) -> &mut ::std::string::String {
        &mut self.visible_device_list
    }

    // Take field
    pub fn take_visible_device_list(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.visible_device_list, ::std::string::String::new())
    }

    pub fn get_visible_device_list(&self) -> &str {
        &self.visible_device_list
    }

    // int32 polling_active_delay_usecs = 6;

    pub fn clear_polling_active_delay_usecs(&mut self) {
        self.polling_active_delay_usecs = 0;
    }

    // Param is passed by value, moved
    pub fn set_polling_active_delay_usecs(&mut self, v: i32) {
        self.polling_active_delay_usecs = v;
    }

    pub fn get_polling_active_delay_usecs(&self) -> i32 {
        self.polling_active_delay_usecs
    }

    // int32 polling_inactive_delay_msecs = 7;

    pub fn clear_polling_inactive_delay_msecs(&mut self) {
        self.polling_inactive_delay_msecs = 0;
    }

    // Param is passed by value, moved
    pub fn set_polling_inactive_delay_msecs(&mut self, v: i32) {
        self.polling_inactive_delay_msecs = v;
    }

    pub fn get_polling_inactive_delay_msecs(&self) -> i32 {
        self.polling_inactive_delay_msecs
    }

    // bool force_gpu_compatible = 8;

    pub fn clear_force_gpu_compatible(&mut self) {
        self.force_gpu_compatible = false;
    }

    // Param is passed by value, moved
    pub fn set_force_gpu_compatible(&mut self, v: bool) {
        self.force_gpu_compatible = v;
    }

    pub fn get_force_gpu_compatible(&self) -> bool {
        self.force_gpu_compatible
    }

    // .tensorflow.GPUOptions.Experimental experimental = 9;

    pub fn clear_experimental(&mut self) {
        self.experimental.clear();
    }

    pub fn has_experimental(&self) -> bool {
        self.experimental.is_some()
    }

    // Param is passed by value, moved
    pub fn set_experimental(&mut self, v: GPUOptions_Experimental) {
        self.experimental = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_experimental(&mut self) -> &mut GPUOptions_Experimental {
        if self.experimental.is_none() {
            self.experimental.set_default();
        }
        self.experimental.as_mut().unwrap()
    }

    // Take field
    pub fn take_experimental(&mut self) -> GPUOptions_Experimental {
        self.experimental.take().unwrap_or_else(|| GPUOptions_Experimental::new())
    }

    pub fn get_experimental(&self) -> &GPUOptions_Experimental {
        self.experimental.as_ref().unwrap_or_else(|| GPUOptions_Experimental::default_instance())
    }
}

impl ::protobuf::Message for GPUOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.experimental {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.per_process_gpu_memory_fraction = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_growth = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.allocator_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deferred_deletion_bytes = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.visible_device_list)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.polling_active_delay_usecs = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.polling_inactive_delay_msecs = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force_gpu_compatible = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.experimental)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.per_process_gpu_memory_fraction != 0. {
            my_size += 9;
        }
        if self.allow_growth != false {
            my_size += 2;
        }
        if !self.allocator_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.allocator_type);
        }
        if self.deferred_deletion_bytes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.deferred_deletion_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.visible_device_list.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.visible_device_list);
        }
        if self.polling_active_delay_usecs != 0 {
            my_size += ::protobuf::rt::value_size(6, self.polling_active_delay_usecs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.polling_inactive_delay_msecs != 0 {
            my_size += ::protobuf::rt::value_size(7, self.polling_inactive_delay_msecs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.force_gpu_compatible != false {
            my_size += 2;
        }
        if let Some(ref v) = self.experimental.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.per_process_gpu_memory_fraction != 0. {
            os.write_double(1, self.per_process_gpu_memory_fraction)?;
        }
        if self.allow_growth != false {
            os.write_bool(4, self.allow_growth)?;
        }
        if !self.allocator_type.is_empty() {
            os.write_string(2, &self.allocator_type)?;
        }
        if self.deferred_deletion_bytes != 0 {
            os.write_int64(3, self.deferred_deletion_bytes)?;
        }
        if !self.visible_device_list.is_empty() {
            os.write_string(5, &self.visible_device_list)?;
        }
        if self.polling_active_delay_usecs != 0 {
            os.write_int32(6, self.polling_active_delay_usecs)?;
        }
        if self.polling_inactive_delay_msecs != 0 {
            os.write_int32(7, self.polling_inactive_delay_msecs)?;
        }
        if self.force_gpu_compatible != false {
            os.write_bool(8, self.force_gpu_compatible)?;
        }
        if let Some(ref v) = self.experimental.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GPUOptions {
        GPUOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "per_process_gpu_memory_fraction",
                    |m: &GPUOptions| { &m.per_process_gpu_memory_fraction },
                    |m: &mut GPUOptions| { &mut m.per_process_gpu_memory_fraction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "allow_growth",
                    |m: &GPUOptions| { &m.allow_growth },
                    |m: &mut GPUOptions| { &mut m.allow_growth },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "allocator_type",
                    |m: &GPUOptions| { &m.allocator_type },
                    |m: &mut GPUOptions| { &mut m.allocator_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "deferred_deletion_bytes",
                    |m: &GPUOptions| { &m.deferred_deletion_bytes },
                    |m: &mut GPUOptions| { &mut m.deferred_deletion_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "visible_device_list",
                    |m: &GPUOptions| { &m.visible_device_list },
                    |m: &mut GPUOptions| { &mut m.visible_device_list },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "polling_active_delay_usecs",
                    |m: &GPUOptions| { &m.polling_active_delay_usecs },
                    |m: &mut GPUOptions| { &mut m.polling_active_delay_usecs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "polling_inactive_delay_msecs",
                    |m: &GPUOptions| { &m.polling_inactive_delay_msecs },
                    |m: &mut GPUOptions| { &mut m.polling_inactive_delay_msecs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "force_gpu_compatible",
                    |m: &GPUOptions| { &m.force_gpu_compatible },
                    |m: &mut GPUOptions| { &mut m.force_gpu_compatible },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GPUOptions_Experimental>>(
                    "experimental",
                    |m: &GPUOptions| { &m.experimental },
                    |m: &mut GPUOptions| { &mut m.experimental },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GPUOptions>(
                    "GPUOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GPUOptions {
        static mut instance: ::protobuf::lazy::Lazy<GPUOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GPUOptions,
        };
        unsafe {
            instance.get(GPUOptions::new)
        }
    }
}

impl ::protobuf::Clear for GPUOptions {
    fn clear(&mut self) {
        self.clear_per_process_gpu_memory_fraction();
        self.clear_allow_growth();
        self.clear_allocator_type();
        self.clear_deferred_deletion_bytes();
        self.clear_visible_device_list();
        self.clear_polling_active_delay_usecs();
        self.clear_polling_inactive_delay_msecs();
        self.clear_force_gpu_compatible();
        self.clear_experimental();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GPUOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GPUOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GPUOptions_Experimental {
    // message fields
    pub virtual_devices: ::protobuf::RepeatedField<GPUOptions_Experimental_VirtualDevices>,
    pub use_unified_memory: bool,
    pub num_dev_to_dev_copy_streams: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GPUOptions_Experimental {
    pub fn new() -> GPUOptions_Experimental {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;

    pub fn clear_virtual_devices(&mut self) {
        self.virtual_devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_virtual_devices(&mut self, v: ::protobuf::RepeatedField<GPUOptions_Experimental_VirtualDevices>) {
        self.virtual_devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_virtual_devices(&mut self) -> &mut ::protobuf::RepeatedField<GPUOptions_Experimental_VirtualDevices> {
        &mut self.virtual_devices
    }

    // Take field
    pub fn take_virtual_devices(&mut self) -> ::protobuf::RepeatedField<GPUOptions_Experimental_VirtualDevices> {
        ::std::mem::replace(&mut self.virtual_devices, ::protobuf::RepeatedField::new())
    }

    pub fn get_virtual_devices(&self) -> &[GPUOptions_Experimental_VirtualDevices] {
        &self.virtual_devices
    }

    // bool use_unified_memory = 2;

    pub fn clear_use_unified_memory(&mut self) {
        self.use_unified_memory = false;
    }

    // Param is passed by value, moved
    pub fn set_use_unified_memory(&mut self, v: bool) {
        self.use_unified_memory = v;
    }

    pub fn get_use_unified_memory(&self) -> bool {
        self.use_unified_memory
    }

    // int32 num_dev_to_dev_copy_streams = 3;

    pub fn clear_num_dev_to_dev_copy_streams(&mut self) {
        self.num_dev_to_dev_copy_streams = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_dev_to_dev_copy_streams(&mut self, v: i32) {
        self.num_dev_to_dev_copy_streams = v;
    }

    pub fn get_num_dev_to_dev_copy_streams(&self) -> i32 {
        self.num_dev_to_dev_copy_streams
    }
}

impl ::protobuf::Message for GPUOptions_Experimental {
    fn is_initialized(&self) -> bool {
        for v in &self.virtual_devices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.virtual_devices)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_unified_memory = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_dev_to_dev_copy_streams = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.virtual_devices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.use_unified_memory != false {
            my_size += 2;
        }
        if self.num_dev_to_dev_copy_streams != 0 {
            my_size += ::protobuf::rt::value_size(3, self.num_dev_to_dev_copy_streams, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.virtual_devices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.use_unified_memory != false {
            os.write_bool(2, self.use_unified_memory)?;
        }
        if self.num_dev_to_dev_copy_streams != 0 {
            os.write_int32(3, self.num_dev_to_dev_copy_streams)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GPUOptions_Experimental {
        GPUOptions_Experimental::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GPUOptions_Experimental_VirtualDevices>>(
                    "virtual_devices",
                    |m: &GPUOptions_Experimental| { &m.virtual_devices },
                    |m: &mut GPUOptions_Experimental| { &mut m.virtual_devices },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "use_unified_memory",
                    |m: &GPUOptions_Experimental| { &m.use_unified_memory },
                    |m: &mut GPUOptions_Experimental| { &mut m.use_unified_memory },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "num_dev_to_dev_copy_streams",
                    |m: &GPUOptions_Experimental| { &m.num_dev_to_dev_copy_streams },
                    |m: &mut GPUOptions_Experimental| { &mut m.num_dev_to_dev_copy_streams },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GPUOptions_Experimental>(
                    "GPUOptions_Experimental",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GPUOptions_Experimental {
        static mut instance: ::protobuf::lazy::Lazy<GPUOptions_Experimental> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GPUOptions_Experimental,
        };
        unsafe {
            instance.get(GPUOptions_Experimental::new)
        }
    }
}

impl ::protobuf::Clear for GPUOptions_Experimental {
    fn clear(&mut self) {
        self.clear_virtual_devices();
        self.clear_use_unified_memory();
        self.clear_num_dev_to_dev_copy_streams();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GPUOptions_Experimental {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GPUOptions_Experimental {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GPUOptions_Experimental_VirtualDevices {
    // message fields
    pub memory_limit_mb: ::std::vec::Vec<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GPUOptions_Experimental_VirtualDevices {
    pub fn new() -> GPUOptions_Experimental_VirtualDevices {
        ::std::default::Default::default()
    }

    // repeated float memory_limit_mb = 1;

    pub fn clear_memory_limit_mb(&mut self) {
        self.memory_limit_mb.clear();
    }

    // Param is passed by value, moved
    pub fn set_memory_limit_mb(&mut self, v: ::std::vec::Vec<f32>) {
        self.memory_limit_mb = v;
    }

    // Mutable pointer to the field.
    pub fn mut_memory_limit_mb(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.memory_limit_mb
    }

    // Take field
    pub fn take_memory_limit_mb(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.memory_limit_mb, ::std::vec::Vec::new())
    }

    pub fn get_memory_limit_mb(&self) -> &[f32] {
        &self.memory_limit_mb
    }
}

impl ::protobuf::Message for GPUOptions_Experimental_VirtualDevices {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.memory_limit_mb)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += 5 * self.memory_limit_mb.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.memory_limit_mb {
            os.write_float(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GPUOptions_Experimental_VirtualDevices {
        GPUOptions_Experimental_VirtualDevices::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "memory_limit_mb",
                    |m: &GPUOptions_Experimental_VirtualDevices| { &m.memory_limit_mb },
                    |m: &mut GPUOptions_Experimental_VirtualDevices| { &mut m.memory_limit_mb },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GPUOptions_Experimental_VirtualDevices>(
                    "GPUOptions_Experimental_VirtualDevices",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GPUOptions_Experimental_VirtualDevices {
        static mut instance: ::protobuf::lazy::Lazy<GPUOptions_Experimental_VirtualDevices> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GPUOptions_Experimental_VirtualDevices,
        };
        unsafe {
            instance.get(GPUOptions_Experimental_VirtualDevices::new)
        }
    }
}

impl ::protobuf::Clear for GPUOptions_Experimental_VirtualDevices {
    fn clear(&mut self) {
        self.clear_memory_limit_mb();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GPUOptions_Experimental_VirtualDevices {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GPUOptions_Experimental_VirtualDevices {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OptimizerOptions {
    // message fields
    pub do_common_subexpression_elimination: bool,
    pub do_constant_folding: bool,
    pub max_folded_constant_in_bytes: i64,
    pub do_function_inlining: bool,
    pub opt_level: OptimizerOptions_Level,
    pub global_jit_level: OptimizerOptions_GlobalJitLevel,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl OptimizerOptions {
    pub fn new() -> OptimizerOptions {
        ::std::default::Default::default()
    }

    // bool do_common_subexpression_elimination = 1;

    pub fn clear_do_common_subexpression_elimination(&mut self) {
        self.do_common_subexpression_elimination = false;
    }

    // Param is passed by value, moved
    pub fn set_do_common_subexpression_elimination(&mut self, v: bool) {
        self.do_common_subexpression_elimination = v;
    }

    pub fn get_do_common_subexpression_elimination(&self) -> bool {
        self.do_common_subexpression_elimination
    }

    // bool do_constant_folding = 2;

    pub fn clear_do_constant_folding(&mut self) {
        self.do_constant_folding = false;
    }

    // Param is passed by value, moved
    pub fn set_do_constant_folding(&mut self, v: bool) {
        self.do_constant_folding = v;
    }

    pub fn get_do_constant_folding(&self) -> bool {
        self.do_constant_folding
    }

    // int64 max_folded_constant_in_bytes = 6;

    pub fn clear_max_folded_constant_in_bytes(&mut self) {
        self.max_folded_constant_in_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_folded_constant_in_bytes(&mut self, v: i64) {
        self.max_folded_constant_in_bytes = v;
    }

    pub fn get_max_folded_constant_in_bytes(&self) -> i64 {
        self.max_folded_constant_in_bytes
    }

    // bool do_function_inlining = 4;

    pub fn clear_do_function_inlining(&mut self) {
        self.do_function_inlining = false;
    }

    // Param is passed by value, moved
    pub fn set_do_function_inlining(&mut self, v: bool) {
        self.do_function_inlining = v;
    }

    pub fn get_do_function_inlining(&self) -> bool {
        self.do_function_inlining
    }

    // .tensorflow.OptimizerOptions.Level opt_level = 3;

    pub fn clear_opt_level(&mut self) {
        self.opt_level = OptimizerOptions_Level::L1;
    }

    // Param is passed by value, moved
    pub fn set_opt_level(&mut self, v: OptimizerOptions_Level) {
        self.opt_level = v;
    }

    pub fn get_opt_level(&self) -> OptimizerOptions_Level {
        self.opt_level
    }

    // .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;

    pub fn clear_global_jit_level(&mut self) {
        self.global_jit_level = OptimizerOptions_GlobalJitLevel::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_global_jit_level(&mut self, v: OptimizerOptions_GlobalJitLevel) {
        self.global_jit_level = v;
    }

    pub fn get_global_jit_level(&self) -> OptimizerOptions_GlobalJitLevel {
        self.global_jit_level
    }
}

impl ::protobuf::Message for OptimizerOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.do_common_subexpression_elimination = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.do_constant_folding = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_folded_constant_in_bytes = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.do_function_inlining = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.opt_level, 3, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.global_jit_level, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.do_common_subexpression_elimination != false {
            my_size += 2;
        }
        if self.do_constant_folding != false {
            my_size += 2;
        }
        if self.max_folded_constant_in_bytes != 0 {
            my_size += ::protobuf::rt::value_size(6, self.max_folded_constant_in_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.do_function_inlining != false {
            my_size += 2;
        }
        if self.opt_level != OptimizerOptions_Level::L1 {
            my_size += ::protobuf::rt::enum_size(3, self.opt_level);
        }
        if self.global_jit_level != OptimizerOptions_GlobalJitLevel::DEFAULT {
            my_size += ::protobuf::rt::enum_size(5, self.global_jit_level);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.do_common_subexpression_elimination != false {
            os.write_bool(1, self.do_common_subexpression_elimination)?;
        }
        if self.do_constant_folding != false {
            os.write_bool(2, self.do_constant_folding)?;
        }
        if self.max_folded_constant_in_bytes != 0 {
            os.write_int64(6, self.max_folded_constant_in_bytes)?;
        }
        if self.do_function_inlining != false {
            os.write_bool(4, self.do_function_inlining)?;
        }
        if self.opt_level != OptimizerOptions_Level::L1 {
            os.write_enum(3, self.opt_level.value())?;
        }
        if self.global_jit_level != OptimizerOptions_GlobalJitLevel::DEFAULT {
            os.write_enum(5, self.global_jit_level.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OptimizerOptions {
        OptimizerOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "do_common_subexpression_elimination",
                    |m: &OptimizerOptions| { &m.do_common_subexpression_elimination },
                    |m: &mut OptimizerOptions| { &mut m.do_common_subexpression_elimination },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "do_constant_folding",
                    |m: &OptimizerOptions| { &m.do_constant_folding },
                    |m: &mut OptimizerOptions| { &mut m.do_constant_folding },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "max_folded_constant_in_bytes",
                    |m: &OptimizerOptions| { &m.max_folded_constant_in_bytes },
                    |m: &mut OptimizerOptions| { &mut m.max_folded_constant_in_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "do_function_inlining",
                    |m: &OptimizerOptions| { &m.do_function_inlining },
                    |m: &mut OptimizerOptions| { &mut m.do_function_inlining },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OptimizerOptions_Level>>(
                    "opt_level",
                    |m: &OptimizerOptions| { &m.opt_level },
                    |m: &mut OptimizerOptions| { &mut m.opt_level },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OptimizerOptions_GlobalJitLevel>>(
                    "global_jit_level",
                    |m: &OptimizerOptions| { &m.global_jit_level },
                    |m: &mut OptimizerOptions| { &mut m.global_jit_level },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OptimizerOptions>(
                    "OptimizerOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OptimizerOptions {
        static mut instance: ::protobuf::lazy::Lazy<OptimizerOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OptimizerOptions,
        };
        unsafe {
            instance.get(OptimizerOptions::new)
        }
    }
}

impl ::protobuf::Clear for OptimizerOptions {
    fn clear(&mut self) {
        self.clear_do_common_subexpression_elimination();
        self.clear_do_constant_folding();
        self.clear_max_folded_constant_in_bytes();
        self.clear_do_function_inlining();
        self.clear_opt_level();
        self.clear_global_jit_level();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OptimizerOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OptimizerOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OptimizerOptions_Level {
    L1 = 0,
    L0 = -1,
}

impl ::protobuf::ProtobufEnum for OptimizerOptions_Level {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OptimizerOptions_Level> {
        match value {
            0 => ::std::option::Option::Some(OptimizerOptions_Level::L1),
            -1 => ::std::option::Option::Some(OptimizerOptions_Level::L0),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OptimizerOptions_Level] = &[
            OptimizerOptions_Level::L1,
            OptimizerOptions_Level::L0,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("OptimizerOptions_Level", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for OptimizerOptions_Level {
}

impl ::std::default::Default for OptimizerOptions_Level {
    fn default() -> Self {
        OptimizerOptions_Level::L1
    }
}

impl ::protobuf::reflect::ProtobufValue for OptimizerOptions_Level {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OptimizerOptions_GlobalJitLevel {
    DEFAULT = 0,
    OFF = -1,
    ON_1 = 1,
    ON_2 = 2,
}

impl ::protobuf::ProtobufEnum for OptimizerOptions_GlobalJitLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OptimizerOptions_GlobalJitLevel> {
        match value {
            0 => ::std::option::Option::Some(OptimizerOptions_GlobalJitLevel::DEFAULT),
            -1 => ::std::option::Option::Some(OptimizerOptions_GlobalJitLevel::OFF),
            1 => ::std::option::Option::Some(OptimizerOptions_GlobalJitLevel::ON_1),
            2 => ::std::option::Option::Some(OptimizerOptions_GlobalJitLevel::ON_2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OptimizerOptions_GlobalJitLevel] = &[
            OptimizerOptions_GlobalJitLevel::DEFAULT,
            OptimizerOptions_GlobalJitLevel::OFF,
            OptimizerOptions_GlobalJitLevel::ON_1,
            OptimizerOptions_GlobalJitLevel::ON_2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("OptimizerOptions_GlobalJitLevel", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for OptimizerOptions_GlobalJitLevel {
}

impl ::std::default::Default for OptimizerOptions_GlobalJitLevel {
    fn default() -> Self {
        OptimizerOptions_GlobalJitLevel::DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for OptimizerOptions_GlobalJitLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphOptions {
    // message fields
    pub enable_recv_scheduling: bool,
    pub optimizer_options: ::protobuf::SingularPtrField<OptimizerOptions>,
    pub build_cost_model: i64,
    pub build_cost_model_after: i64,
    pub infer_shapes: bool,
    pub place_pruned_graph: bool,
    pub enable_bfloat16_sendrecv: bool,
    pub timeline_step: i32,
    pub rewrite_options: ::protobuf::SingularPtrField<super::rewriter_config::RewriterConfig>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GraphOptions {
    pub fn new() -> GraphOptions {
        ::std::default::Default::default()
    }

    // bool enable_recv_scheduling = 2;

    pub fn clear_enable_recv_scheduling(&mut self) {
        self.enable_recv_scheduling = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_recv_scheduling(&mut self, v: bool) {
        self.enable_recv_scheduling = v;
    }

    pub fn get_enable_recv_scheduling(&self) -> bool {
        self.enable_recv_scheduling
    }

    // .tensorflow.OptimizerOptions optimizer_options = 3;

    pub fn clear_optimizer_options(&mut self) {
        self.optimizer_options.clear();
    }

    pub fn has_optimizer_options(&self) -> bool {
        self.optimizer_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optimizer_options(&mut self, v: OptimizerOptions) {
        self.optimizer_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_optimizer_options(&mut self) -> &mut OptimizerOptions {
        if self.optimizer_options.is_none() {
            self.optimizer_options.set_default();
        }
        self.optimizer_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_optimizer_options(&mut self) -> OptimizerOptions {
        self.optimizer_options.take().unwrap_or_else(|| OptimizerOptions::new())
    }

    pub fn get_optimizer_options(&self) -> &OptimizerOptions {
        self.optimizer_options.as_ref().unwrap_or_else(|| OptimizerOptions::default_instance())
    }

    // int64 build_cost_model = 4;

    pub fn clear_build_cost_model(&mut self) {
        self.build_cost_model = 0;
    }

    // Param is passed by value, moved
    pub fn set_build_cost_model(&mut self, v: i64) {
        self.build_cost_model = v;
    }

    pub fn get_build_cost_model(&self) -> i64 {
        self.build_cost_model
    }

    // int64 build_cost_model_after = 9;

    pub fn clear_build_cost_model_after(&mut self) {
        self.build_cost_model_after = 0;
    }

    // Param is passed by value, moved
    pub fn set_build_cost_model_after(&mut self, v: i64) {
        self.build_cost_model_after = v;
    }

    pub fn get_build_cost_model_after(&self) -> i64 {
        self.build_cost_model_after
    }

    // bool infer_shapes = 5;

    pub fn clear_infer_shapes(&mut self) {
        self.infer_shapes = false;
    }

    // Param is passed by value, moved
    pub fn set_infer_shapes(&mut self, v: bool) {
        self.infer_shapes = v;
    }

    pub fn get_infer_shapes(&self) -> bool {
        self.infer_shapes
    }

    // bool place_pruned_graph = 6;

    pub fn clear_place_pruned_graph(&mut self) {
        self.place_pruned_graph = false;
    }

    // Param is passed by value, moved
    pub fn set_place_pruned_graph(&mut self, v: bool) {
        self.place_pruned_graph = v;
    }

    pub fn get_place_pruned_graph(&self) -> bool {
        self.place_pruned_graph
    }

    // bool enable_bfloat16_sendrecv = 7;

    pub fn clear_enable_bfloat16_sendrecv(&mut self) {
        self.enable_bfloat16_sendrecv = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_bfloat16_sendrecv(&mut self, v: bool) {
        self.enable_bfloat16_sendrecv = v;
    }

    pub fn get_enable_bfloat16_sendrecv(&self) -> bool {
        self.enable_bfloat16_sendrecv
    }

    // int32 timeline_step = 8;

    pub fn clear_timeline_step(&mut self) {
        self.timeline_step = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeline_step(&mut self, v: i32) {
        self.timeline_step = v;
    }

    pub fn get_timeline_step(&self) -> i32 {
        self.timeline_step
    }

    // .tensorflow.RewriterConfig rewrite_options = 10;

    pub fn clear_rewrite_options(&mut self) {
        self.rewrite_options.clear();
    }

    pub fn has_rewrite_options(&self) -> bool {
        self.rewrite_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rewrite_options(&mut self, v: super::rewriter_config::RewriterConfig) {
        self.rewrite_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rewrite_options(&mut self) -> &mut super::rewriter_config::RewriterConfig {
        if self.rewrite_options.is_none() {
            self.rewrite_options.set_default();
        }
        self.rewrite_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_rewrite_options(&mut self) -> super::rewriter_config::RewriterConfig {
        self.rewrite_options.take().unwrap_or_else(|| super::rewriter_config::RewriterConfig::new())
    }

    pub fn get_rewrite_options(&self) -> &super::rewriter_config::RewriterConfig {
        self.rewrite_options.as_ref().unwrap_or_else(|| super::rewriter_config::RewriterConfig::default_instance())
    }
}

impl ::protobuf::Message for GraphOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.optimizer_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rewrite_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_recv_scheduling = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.optimizer_options)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.build_cost_model = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.build_cost_model_after = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.infer_shapes = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.place_pruned_graph = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_bfloat16_sendrecv = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timeline_step = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rewrite_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.enable_recv_scheduling != false {
            my_size += 2;
        }
        if let Some(ref v) = self.optimizer_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.build_cost_model != 0 {
            my_size += ::protobuf::rt::value_size(4, self.build_cost_model, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.build_cost_model_after != 0 {
            my_size += ::protobuf::rt::value_size(9, self.build_cost_model_after, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.infer_shapes != false {
            my_size += 2;
        }
        if self.place_pruned_graph != false {
            my_size += 2;
        }
        if self.enable_bfloat16_sendrecv != false {
            my_size += 2;
        }
        if self.timeline_step != 0 {
            my_size += ::protobuf::rt::value_size(8, self.timeline_step, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.rewrite_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.enable_recv_scheduling != false {
            os.write_bool(2, self.enable_recv_scheduling)?;
        }
        if let Some(ref v) = self.optimizer_options.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.build_cost_model != 0 {
            os.write_int64(4, self.build_cost_model)?;
        }
        if self.build_cost_model_after != 0 {
            os.write_int64(9, self.build_cost_model_after)?;
        }
        if self.infer_shapes != false {
            os.write_bool(5, self.infer_shapes)?;
        }
        if self.place_pruned_graph != false {
            os.write_bool(6, self.place_pruned_graph)?;
        }
        if self.enable_bfloat16_sendrecv != false {
            os.write_bool(7, self.enable_bfloat16_sendrecv)?;
        }
        if self.timeline_step != 0 {
            os.write_int32(8, self.timeline_step)?;
        }
        if let Some(ref v) = self.rewrite_options.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphOptions {
        GraphOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "enable_recv_scheduling",
                    |m: &GraphOptions| { &m.enable_recv_scheduling },
                    |m: &mut GraphOptions| { &mut m.enable_recv_scheduling },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OptimizerOptions>>(
                    "optimizer_options",
                    |m: &GraphOptions| { &m.optimizer_options },
                    |m: &mut GraphOptions| { &mut m.optimizer_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "build_cost_model",
                    |m: &GraphOptions| { &m.build_cost_model },
                    |m: &mut GraphOptions| { &mut m.build_cost_model },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "build_cost_model_after",
                    |m: &GraphOptions| { &m.build_cost_model_after },
                    |m: &mut GraphOptions| { &mut m.build_cost_model_after },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "infer_shapes",
                    |m: &GraphOptions| { &m.infer_shapes },
                    |m: &mut GraphOptions| { &mut m.infer_shapes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "place_pruned_graph",
                    |m: &GraphOptions| { &m.place_pruned_graph },
                    |m: &mut GraphOptions| { &mut m.place_pruned_graph },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "enable_bfloat16_sendrecv",
                    |m: &GraphOptions| { &m.enable_bfloat16_sendrecv },
                    |m: &mut GraphOptions| { &mut m.enable_bfloat16_sendrecv },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "timeline_step",
                    |m: &GraphOptions| { &m.timeline_step },
                    |m: &mut GraphOptions| { &mut m.timeline_step },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rewriter_config::RewriterConfig>>(
                    "rewrite_options",
                    |m: &GraphOptions| { &m.rewrite_options },
                    |m: &mut GraphOptions| { &mut m.rewrite_options },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GraphOptions>(
                    "GraphOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GraphOptions {
        static mut instance: ::protobuf::lazy::Lazy<GraphOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GraphOptions,
        };
        unsafe {
            instance.get(GraphOptions::new)
        }
    }
}

impl ::protobuf::Clear for GraphOptions {
    fn clear(&mut self) {
        self.clear_enable_recv_scheduling();
        self.clear_optimizer_options();
        self.clear_build_cost_model();
        self.clear_build_cost_model_after();
        self.clear_infer_shapes();
        self.clear_place_pruned_graph();
        self.clear_enable_bfloat16_sendrecv();
        self.clear_timeline_step();
        self.clear_rewrite_options();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThreadPoolOptionProto {
    // message fields
    pub num_threads: i32,
    pub global_name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ThreadPoolOptionProto {
    pub fn new() -> ThreadPoolOptionProto {
        ::std::default::Default::default()
    }

    // int32 num_threads = 1;

    pub fn clear_num_threads(&mut self) {
        self.num_threads = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_threads(&mut self, v: i32) {
        self.num_threads = v;
    }

    pub fn get_num_threads(&self) -> i32 {
        self.num_threads
    }

    // string global_name = 2;

    pub fn clear_global_name(&mut self) {
        self.global_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_global_name(&mut self, v: ::std::string::String) {
        self.global_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_global_name(&mut self) -> &mut ::std::string::String {
        &mut self.global_name
    }

    // Take field
    pub fn take_global_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.global_name, ::std::string::String::new())
    }

    pub fn get_global_name(&self) -> &str {
        &self.global_name
    }
}

impl ::protobuf::Message for ThreadPoolOptionProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_threads = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.global_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_threads != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_threads, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.global_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.global_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.num_threads != 0 {
            os.write_int32(1, self.num_threads)?;
        }
        if !self.global_name.is_empty() {
            os.write_string(2, &self.global_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThreadPoolOptionProto {
        ThreadPoolOptionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "num_threads",
                    |m: &ThreadPoolOptionProto| { &m.num_threads },
                    |m: &mut ThreadPoolOptionProto| { &mut m.num_threads },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "global_name",
                    |m: &ThreadPoolOptionProto| { &m.global_name },
                    |m: &mut ThreadPoolOptionProto| { &mut m.global_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ThreadPoolOptionProto>(
                    "ThreadPoolOptionProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ThreadPoolOptionProto {
        static mut instance: ::protobuf::lazy::Lazy<ThreadPoolOptionProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ThreadPoolOptionProto,
        };
        unsafe {
            instance.get(ThreadPoolOptionProto::new)
        }
    }
}

impl ::protobuf::Clear for ThreadPoolOptionProto {
    fn clear(&mut self) {
        self.clear_num_threads();
        self.clear_global_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThreadPoolOptionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThreadPoolOptionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RPCOptions {
    // message fields
    pub use_rpc_for_inprocess_master: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RPCOptions {
    pub fn new() -> RPCOptions {
        ::std::default::Default::default()
    }

    // bool use_rpc_for_inprocess_master = 1;

    pub fn clear_use_rpc_for_inprocess_master(&mut self) {
        self.use_rpc_for_inprocess_master = false;
    }

    // Param is passed by value, moved
    pub fn set_use_rpc_for_inprocess_master(&mut self, v: bool) {
        self.use_rpc_for_inprocess_master = v;
    }

    pub fn get_use_rpc_for_inprocess_master(&self) -> bool {
        self.use_rpc_for_inprocess_master
    }
}

impl ::protobuf::Message for RPCOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_rpc_for_inprocess_master = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.use_rpc_for_inprocess_master != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.use_rpc_for_inprocess_master != false {
            os.write_bool(1, self.use_rpc_for_inprocess_master)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RPCOptions {
        RPCOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "use_rpc_for_inprocess_master",
                    |m: &RPCOptions| { &m.use_rpc_for_inprocess_master },
                    |m: &mut RPCOptions| { &mut m.use_rpc_for_inprocess_master },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RPCOptions>(
                    "RPCOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RPCOptions {
        static mut instance: ::protobuf::lazy::Lazy<RPCOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RPCOptions,
        };
        unsafe {
            instance.get(RPCOptions::new)
        }
    }
}

impl ::protobuf::Clear for RPCOptions {
    fn clear(&mut self) {
        self.clear_use_rpc_for_inprocess_master();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RPCOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RPCOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfigProto {
    // message fields
    pub device_count: ::std::collections::HashMap<::std::string::String, i32>,
    pub intra_op_parallelism_threads: i32,
    pub inter_op_parallelism_threads: i32,
    pub use_per_session_threads: bool,
    pub session_inter_op_thread_pool: ::protobuf::RepeatedField<ThreadPoolOptionProto>,
    pub placement_period: i32,
    pub device_filters: ::protobuf::RepeatedField<::std::string::String>,
    pub gpu_options: ::protobuf::SingularPtrField<GPUOptions>,
    pub allow_soft_placement: bool,
    pub log_device_placement: bool,
    pub graph_options: ::protobuf::SingularPtrField<GraphOptions>,
    pub operation_timeout_in_ms: i64,
    pub rpc_options: ::protobuf::SingularPtrField<RPCOptions>,
    pub cluster_def: ::protobuf::SingularPtrField<super::cluster::ClusterDef>,
    pub isolate_session_state: bool,
    pub experimental: ::protobuf::SingularPtrField<ConfigProto_Experimental>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ConfigProto {
    pub fn new() -> ConfigProto {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.ConfigProto.DeviceCountEntry device_count = 1;

    pub fn clear_device_count(&mut self) {
        self.device_count.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_count(&mut self, v: ::std::collections::HashMap<::std::string::String, i32>) {
        self.device_count = v;
    }

    // Mutable pointer to the field.
    pub fn mut_device_count(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, i32> {
        &mut self.device_count
    }

    // Take field
    pub fn take_device_count(&mut self) -> ::std::collections::HashMap<::std::string::String, i32> {
        ::std::mem::replace(&mut self.device_count, ::std::collections::HashMap::new())
    }

    pub fn get_device_count(&self) -> &::std::collections::HashMap<::std::string::String, i32> {
        &self.device_count
    }

    // int32 intra_op_parallelism_threads = 2;

    pub fn clear_intra_op_parallelism_threads(&mut self) {
        self.intra_op_parallelism_threads = 0;
    }

    // Param is passed by value, moved
    pub fn set_intra_op_parallelism_threads(&mut self, v: i32) {
        self.intra_op_parallelism_threads = v;
    }

    pub fn get_intra_op_parallelism_threads(&self) -> i32 {
        self.intra_op_parallelism_threads
    }

    // int32 inter_op_parallelism_threads = 5;

    pub fn clear_inter_op_parallelism_threads(&mut self) {
        self.inter_op_parallelism_threads = 0;
    }

    // Param is passed by value, moved
    pub fn set_inter_op_parallelism_threads(&mut self, v: i32) {
        self.inter_op_parallelism_threads = v;
    }

    pub fn get_inter_op_parallelism_threads(&self) -> i32 {
        self.inter_op_parallelism_threads
    }

    // bool use_per_session_threads = 9;

    pub fn clear_use_per_session_threads(&mut self) {
        self.use_per_session_threads = false;
    }

    // Param is passed by value, moved
    pub fn set_use_per_session_threads(&mut self, v: bool) {
        self.use_per_session_threads = v;
    }

    pub fn get_use_per_session_threads(&self) -> bool {
        self.use_per_session_threads
    }

    // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;

    pub fn clear_session_inter_op_thread_pool(&mut self) {
        self.session_inter_op_thread_pool.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_inter_op_thread_pool(&mut self, v: ::protobuf::RepeatedField<ThreadPoolOptionProto>) {
        self.session_inter_op_thread_pool = v;
    }

    // Mutable pointer to the field.
    pub fn mut_session_inter_op_thread_pool(&mut self) -> &mut ::protobuf::RepeatedField<ThreadPoolOptionProto> {
        &mut self.session_inter_op_thread_pool
    }

    // Take field
    pub fn take_session_inter_op_thread_pool(&mut self) -> ::protobuf::RepeatedField<ThreadPoolOptionProto> {
        ::std::mem::replace(&mut self.session_inter_op_thread_pool, ::protobuf::RepeatedField::new())
    }

    pub fn get_session_inter_op_thread_pool(&self) -> &[ThreadPoolOptionProto] {
        &self.session_inter_op_thread_pool
    }

    // int32 placement_period = 3;

    pub fn clear_placement_period(&mut self) {
        self.placement_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_placement_period(&mut self, v: i32) {
        self.placement_period = v;
    }

    pub fn get_placement_period(&self) -> i32 {
        self.placement_period
    }

    // repeated string device_filters = 4;

    pub fn clear_device_filters(&mut self) {
        self.device_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_filters(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.device_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_device_filters(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.device_filters
    }

    // Take field
    pub fn take_device_filters(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.device_filters, ::protobuf::RepeatedField::new())
    }

    pub fn get_device_filters(&self) -> &[::std::string::String] {
        &self.device_filters
    }

    // .tensorflow.GPUOptions gpu_options = 6;

    pub fn clear_gpu_options(&mut self) {
        self.gpu_options.clear();
    }

    pub fn has_gpu_options(&self) -> bool {
        self.gpu_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_options(&mut self, v: GPUOptions) {
        self.gpu_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_options(&mut self) -> &mut GPUOptions {
        if self.gpu_options.is_none() {
            self.gpu_options.set_default();
        }
        self.gpu_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_options(&mut self) -> GPUOptions {
        self.gpu_options.take().unwrap_or_else(|| GPUOptions::new())
    }

    pub fn get_gpu_options(&self) -> &GPUOptions {
        self.gpu_options.as_ref().unwrap_or_else(|| GPUOptions::default_instance())
    }

    // bool allow_soft_placement = 7;

    pub fn clear_allow_soft_placement(&mut self) {
        self.allow_soft_placement = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_soft_placement(&mut self, v: bool) {
        self.allow_soft_placement = v;
    }

    pub fn get_allow_soft_placement(&self) -> bool {
        self.allow_soft_placement
    }

    // bool log_device_placement = 8;

    pub fn clear_log_device_placement(&mut self) {
        self.log_device_placement = false;
    }

    // Param is passed by value, moved
    pub fn set_log_device_placement(&mut self, v: bool) {
        self.log_device_placement = v;
    }

    pub fn get_log_device_placement(&self) -> bool {
        self.log_device_placement
    }

    // .tensorflow.GraphOptions graph_options = 10;

    pub fn clear_graph_options(&mut self) {
        self.graph_options.clear();
    }

    pub fn has_graph_options(&self) -> bool {
        self.graph_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_graph_options(&mut self, v: GraphOptions) {
        self.graph_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_graph_options(&mut self) -> &mut GraphOptions {
        if self.graph_options.is_none() {
            self.graph_options.set_default();
        }
        self.graph_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_graph_options(&mut self) -> GraphOptions {
        self.graph_options.take().unwrap_or_else(|| GraphOptions::new())
    }

    pub fn get_graph_options(&self) -> &GraphOptions {
        self.graph_options.as_ref().unwrap_or_else(|| GraphOptions::default_instance())
    }

    // int64 operation_timeout_in_ms = 11;

    pub fn clear_operation_timeout_in_ms(&mut self) {
        self.operation_timeout_in_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_operation_timeout_in_ms(&mut self, v: i64) {
        self.operation_timeout_in_ms = v;
    }

    pub fn get_operation_timeout_in_ms(&self) -> i64 {
        self.operation_timeout_in_ms
    }

    // .tensorflow.RPCOptions rpc_options = 13;

    pub fn clear_rpc_options(&mut self) {
        self.rpc_options.clear();
    }

    pub fn has_rpc_options(&self) -> bool {
        self.rpc_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpc_options(&mut self, v: RPCOptions) {
        self.rpc_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpc_options(&mut self) -> &mut RPCOptions {
        if self.rpc_options.is_none() {
            self.rpc_options.set_default();
        }
        self.rpc_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_rpc_options(&mut self) -> RPCOptions {
        self.rpc_options.take().unwrap_or_else(|| RPCOptions::new())
    }

    pub fn get_rpc_options(&self) -> &RPCOptions {
        self.rpc_options.as_ref().unwrap_or_else(|| RPCOptions::default_instance())
    }

    // .tensorflow.ClusterDef cluster_def = 14;

    pub fn clear_cluster_def(&mut self) {
        self.cluster_def.clear();
    }

    pub fn has_cluster_def(&self) -> bool {
        self.cluster_def.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cluster_def(&mut self, v: super::cluster::ClusterDef) {
        self.cluster_def = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_def(&mut self) -> &mut super::cluster::ClusterDef {
        if self.cluster_def.is_none() {
            self.cluster_def.set_default();
        }
        self.cluster_def.as_mut().unwrap()
    }

    // Take field
    pub fn take_cluster_def(&mut self) -> super::cluster::ClusterDef {
        self.cluster_def.take().unwrap_or_else(|| super::cluster::ClusterDef::new())
    }

    pub fn get_cluster_def(&self) -> &super::cluster::ClusterDef {
        self.cluster_def.as_ref().unwrap_or_else(|| super::cluster::ClusterDef::default_instance())
    }

    // bool isolate_session_state = 15;

    pub fn clear_isolate_session_state(&mut self) {
        self.isolate_session_state = false;
    }

    // Param is passed by value, moved
    pub fn set_isolate_session_state(&mut self, v: bool) {
        self.isolate_session_state = v;
    }

    pub fn get_isolate_session_state(&self) -> bool {
        self.isolate_session_state
    }

    // .tensorflow.ConfigProto.Experimental experimental = 16;

    pub fn clear_experimental(&mut self) {
        self.experimental.clear();
    }

    pub fn has_experimental(&self) -> bool {
        self.experimental.is_some()
    }

    // Param is passed by value, moved
    pub fn set_experimental(&mut self, v: ConfigProto_Experimental) {
        self.experimental = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_experimental(&mut self) -> &mut ConfigProto_Experimental {
        if self.experimental.is_none() {
            self.experimental.set_default();
        }
        self.experimental.as_mut().unwrap()
    }

    // Take field
    pub fn take_experimental(&mut self) -> ConfigProto_Experimental {
        self.experimental.take().unwrap_or_else(|| ConfigProto_Experimental::new())
    }

    pub fn get_experimental(&self) -> &ConfigProto_Experimental {
        self.experimental.as_ref().unwrap_or_else(|| ConfigProto_Experimental::default_instance())
    }
}

impl ::protobuf::Message for ConfigProto {
    fn is_initialized(&self) -> bool {
        for v in &self.session_inter_op_thread_pool {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gpu_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.graph_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rpc_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cluster_def {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.experimental {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt32>(wire_type, is, &mut self.device_count)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.intra_op_parallelism_threads = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.inter_op_parallelism_threads = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_per_session_threads = tmp;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.session_inter_op_thread_pool)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.placement_period = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.device_filters)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gpu_options)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_soft_placement = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.log_device_placement = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.graph_options)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.operation_timeout_in_ms = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rpc_options)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cluster_def)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isolate_session_state = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.experimental)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt32>(1, &self.device_count);
        if self.intra_op_parallelism_threads != 0 {
            my_size += ::protobuf::rt::value_size(2, self.intra_op_parallelism_threads, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inter_op_parallelism_threads != 0 {
            my_size += ::protobuf::rt::value_size(5, self.inter_op_parallelism_threads, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.use_per_session_threads != false {
            my_size += 2;
        }
        for value in &self.session_inter_op_thread_pool {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.placement_period != 0 {
            my_size += ::protobuf::rt::value_size(3, self.placement_period, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.device_filters {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(ref v) = self.gpu_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.allow_soft_placement != false {
            my_size += 2;
        }
        if self.log_device_placement != false {
            my_size += 2;
        }
        if let Some(ref v) = self.graph_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.operation_timeout_in_ms != 0 {
            my_size += ::protobuf::rt::value_size(11, self.operation_timeout_in_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.rpc_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cluster_def.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.isolate_session_state != false {
            my_size += 2;
        }
        if let Some(ref v) = self.experimental.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt32>(1, &self.device_count, os)?;
        if self.intra_op_parallelism_threads != 0 {
            os.write_int32(2, self.intra_op_parallelism_threads)?;
        }
        if self.inter_op_parallelism_threads != 0 {
            os.write_int32(5, self.inter_op_parallelism_threads)?;
        }
        if self.use_per_session_threads != false {
            os.write_bool(9, self.use_per_session_threads)?;
        }
        for v in &self.session_inter_op_thread_pool {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.placement_period != 0 {
            os.write_int32(3, self.placement_period)?;
        }
        for v in &self.device_filters {
            os.write_string(4, &v)?;
        };
        if let Some(ref v) = self.gpu_options.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.allow_soft_placement != false {
            os.write_bool(7, self.allow_soft_placement)?;
        }
        if self.log_device_placement != false {
            os.write_bool(8, self.log_device_placement)?;
        }
        if let Some(ref v) = self.graph_options.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.operation_timeout_in_ms != 0 {
            os.write_int64(11, self.operation_timeout_in_ms)?;
        }
        if let Some(ref v) = self.rpc_options.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cluster_def.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.isolate_session_state != false {
            os.write_bool(15, self.isolate_session_state)?;
        }
        if let Some(ref v) = self.experimental.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfigProto {
        ConfigProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt32>(
                    "device_count",
                    |m: &ConfigProto| { &m.device_count },
                    |m: &mut ConfigProto| { &mut m.device_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "intra_op_parallelism_threads",
                    |m: &ConfigProto| { &m.intra_op_parallelism_threads },
                    |m: &mut ConfigProto| { &mut m.intra_op_parallelism_threads },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "inter_op_parallelism_threads",
                    |m: &ConfigProto| { &m.inter_op_parallelism_threads },
                    |m: &mut ConfigProto| { &mut m.inter_op_parallelism_threads },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "use_per_session_threads",
                    |m: &ConfigProto| { &m.use_per_session_threads },
                    |m: &mut ConfigProto| { &mut m.use_per_session_threads },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ThreadPoolOptionProto>>(
                    "session_inter_op_thread_pool",
                    |m: &ConfigProto| { &m.session_inter_op_thread_pool },
                    |m: &mut ConfigProto| { &mut m.session_inter_op_thread_pool },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "placement_period",
                    |m: &ConfigProto| { &m.placement_period },
                    |m: &mut ConfigProto| { &mut m.placement_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_filters",
                    |m: &ConfigProto| { &m.device_filters },
                    |m: &mut ConfigProto| { &mut m.device_filters },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GPUOptions>>(
                    "gpu_options",
                    |m: &ConfigProto| { &m.gpu_options },
                    |m: &mut ConfigProto| { &mut m.gpu_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "allow_soft_placement",
                    |m: &ConfigProto| { &m.allow_soft_placement },
                    |m: &mut ConfigProto| { &mut m.allow_soft_placement },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "log_device_placement",
                    |m: &ConfigProto| { &m.log_device_placement },
                    |m: &mut ConfigProto| { &mut m.log_device_placement },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphOptions>>(
                    "graph_options",
                    |m: &ConfigProto| { &m.graph_options },
                    |m: &mut ConfigProto| { &mut m.graph_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "operation_timeout_in_ms",
                    |m: &ConfigProto| { &m.operation_timeout_in_ms },
                    |m: &mut ConfigProto| { &mut m.operation_timeout_in_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RPCOptions>>(
                    "rpc_options",
                    |m: &ConfigProto| { &m.rpc_options },
                    |m: &mut ConfigProto| { &mut m.rpc_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cluster::ClusterDef>>(
                    "cluster_def",
                    |m: &ConfigProto| { &m.cluster_def },
                    |m: &mut ConfigProto| { &mut m.cluster_def },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isolate_session_state",
                    |m: &ConfigProto| { &m.isolate_session_state },
                    |m: &mut ConfigProto| { &mut m.isolate_session_state },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConfigProto_Experimental>>(
                    "experimental",
                    |m: &ConfigProto| { &m.experimental },
                    |m: &mut ConfigProto| { &mut m.experimental },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConfigProto>(
                    "ConfigProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConfigProto {
        static mut instance: ::protobuf::lazy::Lazy<ConfigProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConfigProto,
        };
        unsafe {
            instance.get(ConfigProto::new)
        }
    }
}

impl ::protobuf::Clear for ConfigProto {
    fn clear(&mut self) {
        self.clear_device_count();
        self.clear_intra_op_parallelism_threads();
        self.clear_inter_op_parallelism_threads();
        self.clear_use_per_session_threads();
        self.clear_session_inter_op_thread_pool();
        self.clear_placement_period();
        self.clear_device_filters();
        self.clear_gpu_options();
        self.clear_allow_soft_placement();
        self.clear_log_device_placement();
        self.clear_graph_options();
        self.clear_operation_timeout_in_ms();
        self.clear_rpc_options();
        self.clear_cluster_def();
        self.clear_isolate_session_state();
        self.clear_experimental();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfigProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfigProto_Experimental {
    // message fields
    pub collective_group_leader: ::std::string::String,
    pub client_handles_error_formatting: bool,
    pub executor_type: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ConfigProto_Experimental {
    pub fn new() -> ConfigProto_Experimental {
        ::std::default::Default::default()
    }

    // string collective_group_leader = 1;

    pub fn clear_collective_group_leader(&mut self) {
        self.collective_group_leader.clear();
    }

    // Param is passed by value, moved
    pub fn set_collective_group_leader(&mut self, v: ::std::string::String) {
        self.collective_group_leader = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_collective_group_leader(&mut self) -> &mut ::std::string::String {
        &mut self.collective_group_leader
    }

    // Take field
    pub fn take_collective_group_leader(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.collective_group_leader, ::std::string::String::new())
    }

    pub fn get_collective_group_leader(&self) -> &str {
        &self.collective_group_leader
    }

    // bool client_handles_error_formatting = 2;

    pub fn clear_client_handles_error_formatting(&mut self) {
        self.client_handles_error_formatting = false;
    }

    // Param is passed by value, moved
    pub fn set_client_handles_error_formatting(&mut self, v: bool) {
        self.client_handles_error_formatting = v;
    }

    pub fn get_client_handles_error_formatting(&self) -> bool {
        self.client_handles_error_formatting
    }

    // string executor_type = 3;

    pub fn clear_executor_type(&mut self) {
        self.executor_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_executor_type(&mut self, v: ::std::string::String) {
        self.executor_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_executor_type(&mut self) -> &mut ::std::string::String {
        &mut self.executor_type
    }

    // Take field
    pub fn take_executor_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.executor_type, ::std::string::String::new())
    }

    pub fn get_executor_type(&self) -> &str {
        &self.executor_type
    }
}

impl ::protobuf::Message for ConfigProto_Experimental {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.collective_group_leader)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.client_handles_error_formatting = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.executor_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.collective_group_leader.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.collective_group_leader);
        }
        if self.client_handles_error_formatting != false {
            my_size += 2;
        }
        if !self.executor_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.executor_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.collective_group_leader.is_empty() {
            os.write_string(1, &self.collective_group_leader)?;
        }
        if self.client_handles_error_formatting != false {
            os.write_bool(2, self.client_handles_error_formatting)?;
        }
        if !self.executor_type.is_empty() {
            os.write_string(3, &self.executor_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfigProto_Experimental {
        ConfigProto_Experimental::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "collective_group_leader",
                    |m: &ConfigProto_Experimental| { &m.collective_group_leader },
                    |m: &mut ConfigProto_Experimental| { &mut m.collective_group_leader },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "client_handles_error_formatting",
                    |m: &ConfigProto_Experimental| { &m.client_handles_error_formatting },
                    |m: &mut ConfigProto_Experimental| { &mut m.client_handles_error_formatting },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "executor_type",
                    |m: &ConfigProto_Experimental| { &m.executor_type },
                    |m: &mut ConfigProto_Experimental| { &mut m.executor_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConfigProto_Experimental>(
                    "ConfigProto_Experimental",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConfigProto_Experimental {
        static mut instance: ::protobuf::lazy::Lazy<ConfigProto_Experimental> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConfigProto_Experimental,
        };
        unsafe {
            instance.get(ConfigProto_Experimental::new)
        }
    }
}

impl ::protobuf::Clear for ConfigProto_Experimental {
    fn clear(&mut self) {
        self.clear_collective_group_leader();
        self.clear_client_handles_error_formatting();
        self.clear_executor_type();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfigProto_Experimental {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigProto_Experimental {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunOptions {
    // message fields
    pub trace_level: RunOptions_TraceLevel,
    pub timeout_in_ms: i64,
    pub inter_op_thread_pool: i32,
    pub output_partition_graphs: bool,
    pub debug_options: ::protobuf::SingularPtrField<super::debug::DebugOptions>,
    pub report_tensor_allocations_upon_oom: bool,
    pub experimental: ::protobuf::SingularPtrField<RunOptions_Experimental>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RunOptions {
    pub fn new() -> RunOptions {
        ::std::default::Default::default()
    }

    // .tensorflow.RunOptions.TraceLevel trace_level = 1;

    pub fn clear_trace_level(&mut self) {
        self.trace_level = RunOptions_TraceLevel::NO_TRACE;
    }

    // Param is passed by value, moved
    pub fn set_trace_level(&mut self, v: RunOptions_TraceLevel) {
        self.trace_level = v;
    }

    pub fn get_trace_level(&self) -> RunOptions_TraceLevel {
        self.trace_level
    }

    // int64 timeout_in_ms = 2;

    pub fn clear_timeout_in_ms(&mut self) {
        self.timeout_in_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_in_ms(&mut self, v: i64) {
        self.timeout_in_ms = v;
    }

    pub fn get_timeout_in_ms(&self) -> i64 {
        self.timeout_in_ms
    }

    // int32 inter_op_thread_pool = 3;

    pub fn clear_inter_op_thread_pool(&mut self) {
        self.inter_op_thread_pool = 0;
    }

    // Param is passed by value, moved
    pub fn set_inter_op_thread_pool(&mut self, v: i32) {
        self.inter_op_thread_pool = v;
    }

    pub fn get_inter_op_thread_pool(&self) -> i32 {
        self.inter_op_thread_pool
    }

    // bool output_partition_graphs = 5;

    pub fn clear_output_partition_graphs(&mut self) {
        self.output_partition_graphs = false;
    }

    // Param is passed by value, moved
    pub fn set_output_partition_graphs(&mut self, v: bool) {
        self.output_partition_graphs = v;
    }

    pub fn get_output_partition_graphs(&self) -> bool {
        self.output_partition_graphs
    }

    // .tensorflow.DebugOptions debug_options = 6;

    pub fn clear_debug_options(&mut self) {
        self.debug_options.clear();
    }

    pub fn has_debug_options(&self) -> bool {
        self.debug_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_debug_options(&mut self, v: super::debug::DebugOptions) {
        self.debug_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug_options(&mut self) -> &mut super::debug::DebugOptions {
        if self.debug_options.is_none() {
            self.debug_options.set_default();
        }
        self.debug_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_debug_options(&mut self) -> super::debug::DebugOptions {
        self.debug_options.take().unwrap_or_else(|| super::debug::DebugOptions::new())
    }

    pub fn get_debug_options(&self) -> &super::debug::DebugOptions {
        self.debug_options.as_ref().unwrap_or_else(|| super::debug::DebugOptions::default_instance())
    }

    // bool report_tensor_allocations_upon_oom = 7;

    pub fn clear_report_tensor_allocations_upon_oom(&mut self) {
        self.report_tensor_allocations_upon_oom = false;
    }

    // Param is passed by value, moved
    pub fn set_report_tensor_allocations_upon_oom(&mut self, v: bool) {
        self.report_tensor_allocations_upon_oom = v;
    }

    pub fn get_report_tensor_allocations_upon_oom(&self) -> bool {
        self.report_tensor_allocations_upon_oom
    }

    // .tensorflow.RunOptions.Experimental experimental = 8;

    pub fn clear_experimental(&mut self) {
        self.experimental.clear();
    }

    pub fn has_experimental(&self) -> bool {
        self.experimental.is_some()
    }

    // Param is passed by value, moved
    pub fn set_experimental(&mut self, v: RunOptions_Experimental) {
        self.experimental = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_experimental(&mut self) -> &mut RunOptions_Experimental {
        if self.experimental.is_none() {
            self.experimental.set_default();
        }
        self.experimental.as_mut().unwrap()
    }

    // Take field
    pub fn take_experimental(&mut self) -> RunOptions_Experimental {
        self.experimental.take().unwrap_or_else(|| RunOptions_Experimental::new())
    }

    pub fn get_experimental(&self) -> &RunOptions_Experimental {
        self.experimental.as_ref().unwrap_or_else(|| RunOptions_Experimental::default_instance())
    }
}

impl ::protobuf::Message for RunOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.debug_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.experimental {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.trace_level, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timeout_in_ms = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.inter_op_thread_pool = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.output_partition_graphs = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.debug_options)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.report_tensor_allocations_upon_oom = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.experimental)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.trace_level != RunOptions_TraceLevel::NO_TRACE {
            my_size += ::protobuf::rt::enum_size(1, self.trace_level);
        }
        if self.timeout_in_ms != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timeout_in_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inter_op_thread_pool != 0 {
            my_size += ::protobuf::rt::value_size(3, self.inter_op_thread_pool, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.output_partition_graphs != false {
            my_size += 2;
        }
        if let Some(ref v) = self.debug_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.report_tensor_allocations_upon_oom != false {
            my_size += 2;
        }
        if let Some(ref v) = self.experimental.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.trace_level != RunOptions_TraceLevel::NO_TRACE {
            os.write_enum(1, self.trace_level.value())?;
        }
        if self.timeout_in_ms != 0 {
            os.write_int64(2, self.timeout_in_ms)?;
        }
        if self.inter_op_thread_pool != 0 {
            os.write_int32(3, self.inter_op_thread_pool)?;
        }
        if self.output_partition_graphs != false {
            os.write_bool(5, self.output_partition_graphs)?;
        }
        if let Some(ref v) = self.debug_options.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.report_tensor_allocations_upon_oom != false {
            os.write_bool(7, self.report_tensor_allocations_upon_oom)?;
        }
        if let Some(ref v) = self.experimental.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunOptions {
        RunOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RunOptions_TraceLevel>>(
                    "trace_level",
                    |m: &RunOptions| { &m.trace_level },
                    |m: &mut RunOptions| { &mut m.trace_level },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timeout_in_ms",
                    |m: &RunOptions| { &m.timeout_in_ms },
                    |m: &mut RunOptions| { &mut m.timeout_in_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "inter_op_thread_pool",
                    |m: &RunOptions| { &m.inter_op_thread_pool },
                    |m: &mut RunOptions| { &mut m.inter_op_thread_pool },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "output_partition_graphs",
                    |m: &RunOptions| { &m.output_partition_graphs },
                    |m: &mut RunOptions| { &mut m.output_partition_graphs },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::debug::DebugOptions>>(
                    "debug_options",
                    |m: &RunOptions| { &m.debug_options },
                    |m: &mut RunOptions| { &mut m.debug_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "report_tensor_allocations_upon_oom",
                    |m: &RunOptions| { &m.report_tensor_allocations_upon_oom },
                    |m: &mut RunOptions| { &mut m.report_tensor_allocations_upon_oom },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RunOptions_Experimental>>(
                    "experimental",
                    |m: &RunOptions| { &m.experimental },
                    |m: &mut RunOptions| { &mut m.experimental },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RunOptions>(
                    "RunOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RunOptions {
        static mut instance: ::protobuf::lazy::Lazy<RunOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RunOptions,
        };
        unsafe {
            instance.get(RunOptions::new)
        }
    }
}

impl ::protobuf::Clear for RunOptions {
    fn clear(&mut self) {
        self.clear_trace_level();
        self.clear_timeout_in_ms();
        self.clear_inter_op_thread_pool();
        self.clear_output_partition_graphs();
        self.clear_debug_options();
        self.clear_report_tensor_allocations_upon_oom();
        self.clear_experimental();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunOptions_Experimental {
    // message fields
    pub collective_graph_key: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RunOptions_Experimental {
    pub fn new() -> RunOptions_Experimental {
        ::std::default::Default::default()
    }

    // int64 collective_graph_key = 1;

    pub fn clear_collective_graph_key(&mut self) {
        self.collective_graph_key = 0;
    }

    // Param is passed by value, moved
    pub fn set_collective_graph_key(&mut self, v: i64) {
        self.collective_graph_key = v;
    }

    pub fn get_collective_graph_key(&self) -> i64 {
        self.collective_graph_key
    }
}

impl ::protobuf::Message for RunOptions_Experimental {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.collective_graph_key = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.collective_graph_key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.collective_graph_key, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.collective_graph_key != 0 {
            os.write_int64(1, self.collective_graph_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunOptions_Experimental {
        RunOptions_Experimental::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "collective_graph_key",
                    |m: &RunOptions_Experimental| { &m.collective_graph_key },
                    |m: &mut RunOptions_Experimental| { &mut m.collective_graph_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RunOptions_Experimental>(
                    "RunOptions_Experimental",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RunOptions_Experimental {
        static mut instance: ::protobuf::lazy::Lazy<RunOptions_Experimental> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RunOptions_Experimental,
        };
        unsafe {
            instance.get(RunOptions_Experimental::new)
        }
    }
}

impl ::protobuf::Clear for RunOptions_Experimental {
    fn clear(&mut self) {
        self.clear_collective_graph_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunOptions_Experimental {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunOptions_Experimental {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RunOptions_TraceLevel {
    NO_TRACE = 0,
    SOFTWARE_TRACE = 1,
    HARDWARE_TRACE = 2,
    FULL_TRACE = 3,
}

impl ::protobuf::ProtobufEnum for RunOptions_TraceLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RunOptions_TraceLevel> {
        match value {
            0 => ::std::option::Option::Some(RunOptions_TraceLevel::NO_TRACE),
            1 => ::std::option::Option::Some(RunOptions_TraceLevel::SOFTWARE_TRACE),
            2 => ::std::option::Option::Some(RunOptions_TraceLevel::HARDWARE_TRACE),
            3 => ::std::option::Option::Some(RunOptions_TraceLevel::FULL_TRACE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RunOptions_TraceLevel] = &[
            RunOptions_TraceLevel::NO_TRACE,
            RunOptions_TraceLevel::SOFTWARE_TRACE,
            RunOptions_TraceLevel::HARDWARE_TRACE,
            RunOptions_TraceLevel::FULL_TRACE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RunOptions_TraceLevel", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RunOptions_TraceLevel {
}

impl ::std::default::Default for RunOptions_TraceLevel {
    fn default() -> Self {
        RunOptions_TraceLevel::NO_TRACE
    }
}

impl ::protobuf::reflect::ProtobufValue for RunOptions_TraceLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunMetadata {
    // message fields
    pub step_stats: ::protobuf::SingularPtrField<super::step_stats::StepStats>,
    pub cost_graph: ::protobuf::SingularPtrField<super::cost_graph::CostGraphDef>,
    pub partition_graphs: ::protobuf::RepeatedField<super::graph::GraphDef>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RunMetadata {
    pub fn new() -> RunMetadata {
        ::std::default::Default::default()
    }

    // .tensorflow.StepStats step_stats = 1;

    pub fn clear_step_stats(&mut self) {
        self.step_stats.clear();
    }

    pub fn has_step_stats(&self) -> bool {
        self.step_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_step_stats(&mut self, v: super::step_stats::StepStats) {
        self.step_stats = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_step_stats(&mut self) -> &mut super::step_stats::StepStats {
        if self.step_stats.is_none() {
            self.step_stats.set_default();
        }
        self.step_stats.as_mut().unwrap()
    }

    // Take field
    pub fn take_step_stats(&mut self) -> super::step_stats::StepStats {
        self.step_stats.take().unwrap_or_else(|| super::step_stats::StepStats::new())
    }

    pub fn get_step_stats(&self) -> &super::step_stats::StepStats {
        self.step_stats.as_ref().unwrap_or_else(|| super::step_stats::StepStats::default_instance())
    }

    // .tensorflow.CostGraphDef cost_graph = 2;

    pub fn clear_cost_graph(&mut self) {
        self.cost_graph.clear();
    }

    pub fn has_cost_graph(&self) -> bool {
        self.cost_graph.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cost_graph(&mut self, v: super::cost_graph::CostGraphDef) {
        self.cost_graph = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cost_graph(&mut self) -> &mut super::cost_graph::CostGraphDef {
        if self.cost_graph.is_none() {
            self.cost_graph.set_default();
        }
        self.cost_graph.as_mut().unwrap()
    }

    // Take field
    pub fn take_cost_graph(&mut self) -> super::cost_graph::CostGraphDef {
        self.cost_graph.take().unwrap_or_else(|| super::cost_graph::CostGraphDef::new())
    }

    pub fn get_cost_graph(&self) -> &super::cost_graph::CostGraphDef {
        self.cost_graph.as_ref().unwrap_or_else(|| super::cost_graph::CostGraphDef::default_instance())
    }

    // repeated .tensorflow.GraphDef partition_graphs = 3;

    pub fn clear_partition_graphs(&mut self) {
        self.partition_graphs.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_graphs(&mut self, v: ::protobuf::RepeatedField<super::graph::GraphDef>) {
        self.partition_graphs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partition_graphs(&mut self) -> &mut ::protobuf::RepeatedField<super::graph::GraphDef> {
        &mut self.partition_graphs
    }

    // Take field
    pub fn take_partition_graphs(&mut self) -> ::protobuf::RepeatedField<super::graph::GraphDef> {
        ::std::mem::replace(&mut self.partition_graphs, ::protobuf::RepeatedField::new())
    }

    pub fn get_partition_graphs(&self) -> &[super::graph::GraphDef] {
        &self.partition_graphs
    }
}

impl ::protobuf::Message for RunMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.step_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cost_graph {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.partition_graphs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.step_stats)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cost_graph)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.partition_graphs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.step_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cost_graph.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.partition_graphs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.step_stats.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cost_graph.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.partition_graphs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunMetadata {
        RunMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::step_stats::StepStats>>(
                    "step_stats",
                    |m: &RunMetadata| { &m.step_stats },
                    |m: &mut RunMetadata| { &mut m.step_stats },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cost_graph::CostGraphDef>>(
                    "cost_graph",
                    |m: &RunMetadata| { &m.cost_graph },
                    |m: &mut RunMetadata| { &mut m.cost_graph },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::graph::GraphDef>>(
                    "partition_graphs",
                    |m: &RunMetadata| { &m.partition_graphs },
                    |m: &mut RunMetadata| { &mut m.partition_graphs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RunMetadata>(
                    "RunMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RunMetadata {
        static mut instance: ::protobuf::lazy::Lazy<RunMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RunMetadata,
        };
        unsafe {
            instance.get(RunMetadata::new)
        }
    }
}

impl ::protobuf::Clear for RunMetadata {
    fn clear(&mut self) {
        self.clear_step_stats();
        self.clear_cost_graph();
        self.clear_partition_graphs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TensorConnection {
    // message fields
    pub from_tensor: ::std::string::String,
    pub to_tensor: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TensorConnection {
    pub fn new() -> TensorConnection {
        ::std::default::Default::default()
    }

    // string from_tensor = 1;

    pub fn clear_from_tensor(&mut self) {
        self.from_tensor.clear();
    }

    // Param is passed by value, moved
    pub fn set_from_tensor(&mut self, v: ::std::string::String) {
        self.from_tensor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_tensor(&mut self) -> &mut ::std::string::String {
        &mut self.from_tensor
    }

    // Take field
    pub fn take_from_tensor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from_tensor, ::std::string::String::new())
    }

    pub fn get_from_tensor(&self) -> &str {
        &self.from_tensor
    }

    // string to_tensor = 2;

    pub fn clear_to_tensor(&mut self) {
        self.to_tensor.clear();
    }

    // Param is passed by value, moved
    pub fn set_to_tensor(&mut self, v: ::std::string::String) {
        self.to_tensor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_tensor(&mut self) -> &mut ::std::string::String {
        &mut self.to_tensor
    }

    // Take field
    pub fn take_to_tensor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to_tensor, ::std::string::String::new())
    }

    pub fn get_to_tensor(&self) -> &str {
        &self.to_tensor
    }
}

impl ::protobuf::Message for TensorConnection {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from_tensor)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to_tensor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.from_tensor.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.from_tensor);
        }
        if !self.to_tensor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.to_tensor);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.from_tensor.is_empty() {
            os.write_string(1, &self.from_tensor)?;
        }
        if !self.to_tensor.is_empty() {
            os.write_string(2, &self.to_tensor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorConnection {
        TensorConnection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "from_tensor",
                    |m: &TensorConnection| { &m.from_tensor },
                    |m: &mut TensorConnection| { &mut m.from_tensor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "to_tensor",
                    |m: &TensorConnection| { &m.to_tensor },
                    |m: &mut TensorConnection| { &mut m.to_tensor },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TensorConnection>(
                    "TensorConnection",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TensorConnection {
        static mut instance: ::protobuf::lazy::Lazy<TensorConnection> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TensorConnection,
        };
        unsafe {
            instance.get(TensorConnection::new)
        }
    }
}

impl ::protobuf::Clear for TensorConnection {
    fn clear(&mut self) {
        self.clear_from_tensor();
        self.clear_to_tensor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorConnection {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CallableOptions {
    // message fields
    pub feed: ::protobuf::RepeatedField<::std::string::String>,
    pub fetch: ::protobuf::RepeatedField<::std::string::String>,
    pub target: ::protobuf::RepeatedField<::std::string::String>,
    pub run_options: ::protobuf::SingularPtrField<RunOptions>,
    pub tensor_connection: ::protobuf::RepeatedField<TensorConnection>,
    pub feed_devices: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub fetch_devices: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub fetch_skip_sync: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CallableOptions {
    pub fn new() -> CallableOptions {
        ::std::default::Default::default()
    }

    // repeated string feed = 1;

    pub fn clear_feed(&mut self) {
        self.feed.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.feed = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.feed
    }

    // Take field
    pub fn take_feed(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.feed, ::protobuf::RepeatedField::new())
    }

    pub fn get_feed(&self) -> &[::std::string::String] {
        &self.feed
    }

    // repeated string fetch = 2;

    pub fn clear_fetch(&mut self) {
        self.fetch.clear();
    }

    // Param is passed by value, moved
    pub fn set_fetch(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.fetch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fetch(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.fetch
    }

    // Take field
    pub fn take_fetch(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.fetch, ::protobuf::RepeatedField::new())
    }

    pub fn get_fetch(&self) -> &[::std::string::String] {
        &self.fetch
    }

    // repeated string target = 3;

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.target = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.target, ::protobuf::RepeatedField::new())
    }

    pub fn get_target(&self) -> &[::std::string::String] {
        &self.target
    }

    // .tensorflow.RunOptions run_options = 4;

    pub fn clear_run_options(&mut self) {
        self.run_options.clear();
    }

    pub fn has_run_options(&self) -> bool {
        self.run_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_run_options(&mut self, v: RunOptions) {
        self.run_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_options(&mut self) -> &mut RunOptions {
        if self.run_options.is_none() {
            self.run_options.set_default();
        }
        self.run_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_run_options(&mut self) -> RunOptions {
        self.run_options.take().unwrap_or_else(|| RunOptions::new())
    }

    pub fn get_run_options(&self) -> &RunOptions {
        self.run_options.as_ref().unwrap_or_else(|| RunOptions::default_instance())
    }

    // repeated .tensorflow.TensorConnection tensor_connection = 5;

    pub fn clear_tensor_connection(&mut self) {
        self.tensor_connection.clear();
    }

    // Param is passed by value, moved
    pub fn set_tensor_connection(&mut self, v: ::protobuf::RepeatedField<TensorConnection>) {
        self.tensor_connection = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tensor_connection(&mut self) -> &mut ::protobuf::RepeatedField<TensorConnection> {
        &mut self.tensor_connection
    }

    // Take field
    pub fn take_tensor_connection(&mut self) -> ::protobuf::RepeatedField<TensorConnection> {
        ::std::mem::replace(&mut self.tensor_connection, ::protobuf::RepeatedField::new())
    }

    pub fn get_tensor_connection(&self) -> &[TensorConnection] {
        &self.tensor_connection
    }

    // repeated .tensorflow.CallableOptions.FeedDevicesEntry feed_devices = 6;

    pub fn clear_feed_devices(&mut self) {
        self.feed_devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_devices(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.feed_devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed_devices(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.feed_devices
    }

    // Take field
    pub fn take_feed_devices(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.feed_devices, ::std::collections::HashMap::new())
    }

    pub fn get_feed_devices(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.feed_devices
    }

    // repeated .tensorflow.CallableOptions.FetchDevicesEntry fetch_devices = 7;

    pub fn clear_fetch_devices(&mut self) {
        self.fetch_devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_fetch_devices(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.fetch_devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fetch_devices(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.fetch_devices
    }

    // Take field
    pub fn take_fetch_devices(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.fetch_devices, ::std::collections::HashMap::new())
    }

    pub fn get_fetch_devices(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.fetch_devices
    }

    // bool fetch_skip_sync = 8;

    pub fn clear_fetch_skip_sync(&mut self) {
        self.fetch_skip_sync = false;
    }

    // Param is passed by value, moved
    pub fn set_fetch_skip_sync(&mut self, v: bool) {
        self.fetch_skip_sync = v;
    }

    pub fn get_fetch_skip_sync(&self) -> bool {
        self.fetch_skip_sync
    }
}

impl ::protobuf::Message for CallableOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.run_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tensor_connection {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.feed)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.fetch)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.target)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.run_options)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tensor_connection)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.feed_devices)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.fetch_devices)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fetch_skip_sync = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.feed {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.fetch {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.target {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if let Some(ref v) = self.run_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.tensor_connection {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.feed_devices);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.fetch_devices);
        if self.fetch_skip_sync != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.feed {
            os.write_string(1, &v)?;
        };
        for v in &self.fetch {
            os.write_string(2, &v)?;
        };
        for v in &self.target {
            os.write_string(3, &v)?;
        };
        if let Some(ref v) = self.run_options.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.tensor_connection {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.feed_devices, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.fetch_devices, os)?;
        if self.fetch_skip_sync != false {
            os.write_bool(8, self.fetch_skip_sync)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallableOptions {
        CallableOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "feed",
                    |m: &CallableOptions| { &m.feed },
                    |m: &mut CallableOptions| { &mut m.feed },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fetch",
                    |m: &CallableOptions| { &m.fetch },
                    |m: &mut CallableOptions| { &mut m.fetch },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "target",
                    |m: &CallableOptions| { &m.target },
                    |m: &mut CallableOptions| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RunOptions>>(
                    "run_options",
                    |m: &CallableOptions| { &m.run_options },
                    |m: &mut CallableOptions| { &mut m.run_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TensorConnection>>(
                    "tensor_connection",
                    |m: &CallableOptions| { &m.tensor_connection },
                    |m: &mut CallableOptions| { &mut m.tensor_connection },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "feed_devices",
                    |m: &CallableOptions| { &m.feed_devices },
                    |m: &mut CallableOptions| { &mut m.feed_devices },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "fetch_devices",
                    |m: &CallableOptions| { &m.fetch_devices },
                    |m: &mut CallableOptions| { &mut m.fetch_devices },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fetch_skip_sync",
                    |m: &CallableOptions| { &m.fetch_skip_sync },
                    |m: &mut CallableOptions| { &mut m.fetch_skip_sync },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CallableOptions>(
                    "CallableOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CallableOptions {
        static mut instance: ::protobuf::lazy::Lazy<CallableOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CallableOptions,
        };
        unsafe {
            instance.get(CallableOptions::new)
        }
    }
}

impl ::protobuf::Clear for CallableOptions {
    fn clear(&mut self) {
        self.clear_feed();
        self.clear_fetch();
        self.clear_target();
        self.clear_run_options();
        self.clear_tensor_connection();
        self.clear_feed_devices();
        self.clear_fetch_devices();
        self.clear_fetch_skip_sync();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallableOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallableOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%tensorflow/core/protobuf/config.proto\x12\ntensorflow\x1a*tensorflow/\
    core/framework/cost_graph.proto\x1a%tensorflow/core/framework/graph.prot\
    o\x1a*tensorflow/core/framework/step_stats.proto\x1a$tensorflow/core/pro\
    tobuf/debug.proto\x1a&tensorflow/core/protobuf/cluster.proto\x1a.tensorf\
    low/core/protobuf/rewriter_config.proto\"\x90\x06\n\nGPUOptions\x12D\n\
    \x1fper_process_gpu_memory_fraction\x18\x01\x20\x01(\x01R\x1bperProcessG\
    puMemoryFraction\x12!\n\x0callow_growth\x18\x04\x20\x01(\x08R\x0ballowGr\
    owth\x12%\n\x0eallocator_type\x18\x02\x20\x01(\tR\rallocatorType\x126\n\
    \x17deferred_deletion_bytes\x18\x03\x20\x01(\x03R\x15deferredDeletionByt\
    es\x12.\n\x13visible_device_list\x18\x05\x20\x01(\tR\x11visibleDeviceLis\
    t\x12;\n\x1apolling_active_delay_usecs\x18\x06\x20\x01(\x05R\x17pollingA\
    ctiveDelayUsecs\x12?\n\x1cpolling_inactive_delay_msecs\x18\x07\x20\x01(\
    \x05R\x19pollingInactiveDelayMsecs\x120\n\x14force_gpu_compatible\x18\
    \x08\x20\x01(\x08R\x12forceGpuCompatible\x12G\n\x0cexperimental\x18\t\
    \x20\x01(\x0b2#.tensorflow.GPUOptions.ExperimentalR\x0cexperimental\x1a\
    \x90\x02\n\x0cExperimental\x12[\n\x0fvirtual_devices\x18\x01\x20\x03(\
    \x0b22.tensorflow.GPUOptions.Experimental.VirtualDevicesR\x0evirtualDevi\
    ces\x12,\n\x12use_unified_memory\x18\x02\x20\x01(\x08R\x10useUnifiedMemo\
    ry\x12;\n\x1bnum_dev_to_dev_copy_streams\x18\x03\x20\x01(\x05R\x16numDev\
    ToDevCopyStreams\x1a8\n\x0eVirtualDevices\x12&\n\x0fmemory_limit_mb\x18\
    \x01\x20\x03(\x02R\rmemoryLimitMb\"\x82\x04\n\x10OptimizerOptions\x12M\n\
    #do_common_subexpression_elimination\x18\x01\x20\x01(\x08R\x20doCommonSu\
    bexpressionElimination\x12.\n\x13do_constant_folding\x18\x02\x20\x01(\
    \x08R\x11doConstantFolding\x12>\n\x1cmax_folded_constant_in_bytes\x18\
    \x06\x20\x01(\x03R\x18maxFoldedConstantInBytes\x120\n\x14do_function_inl\
    ining\x18\x04\x20\x01(\x08R\x12doFunctionInlining\x12?\n\topt_level\x18\
    \x03\x20\x01(\x0e2\".tensorflow.OptimizerOptions.LevelR\x08optLevel\x12U\
    \n\x10global_jit_level\x18\x05\x20\x01(\x0e2+.tensorflow.OptimizerOption\
    s.GlobalJitLevelR\x0eglobalJitLevel\"\x20\n\x05Level\x12\x06\n\x02L1\x10\
    \0\x12\x0f\n\x02L0\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\"C\n\x0eG\
    lobalJitLevel\x12\x0b\n\x07DEFAULT\x10\0\x12\x10\n\x03OFF\x10\xff\xff\
    \xff\xff\xff\xff\xff\xff\xff\x01\x12\x08\n\x04ON_1\x10\x01\x12\x08\n\x04\
    ON_2\x10\x02\"\x90\x04\n\x0cGraphOptions\x124\n\x16enable_recv_schedulin\
    g\x18\x02\x20\x01(\x08R\x14enableRecvScheduling\x12I\n\x11optimizer_opti\
    ons\x18\x03\x20\x01(\x0b2\x1c.tensorflow.OptimizerOptionsR\x10optimizerO\
    ptions\x12(\n\x10build_cost_model\x18\x04\x20\x01(\x03R\x0ebuildCostMode\
    l\x123\n\x16build_cost_model_after\x18\t\x20\x01(\x03R\x13buildCostModel\
    After\x12!\n\x0cinfer_shapes\x18\x05\x20\x01(\x08R\x0binferShapes\x12,\n\
    \x12place_pruned_graph\x18\x06\x20\x01(\x08R\x10placePrunedGraph\x128\n\
    \x18enable_bfloat16_sendrecv\x18\x07\x20\x01(\x08R\x16enableBfloat16Send\
    recv\x12#\n\rtimeline_step\x18\x08\x20\x01(\x05R\x0ctimelineStep\x12C\n\
    \x0frewrite_options\x18\n\x20\x01(\x0b2\x1a.tensorflow.RewriterConfigR\
    \x0erewriteOptionsJ\x04\x08\x01\x10\x02R%skip_common_subexpression_elimi\
    nation\"Y\n\x15ThreadPoolOptionProto\x12\x1f\n\x0bnum_threads\x18\x01\
    \x20\x01(\x05R\nnumThreads\x12\x1f\n\x0bglobal_name\x18\x02\x20\x01(\tR\
    \nglobalName\"L\n\nRPCOptions\x12>\n\x1cuse_rpc_for_inprocess_master\x18\
    \x01\x20\x01(\x08R\x18useRpcForInprocessMaster\"\xc0\t\n\x0bConfigProto\
    \x12K\n\x0cdevice_count\x18\x01\x20\x03(\x0b2(.tensorflow.ConfigProto.De\
    viceCountEntryR\x0bdeviceCount\x12?\n\x1cintra_op_parallelism_threads\
    \x18\x02\x20\x01(\x05R\x19intraOpParallelismThreads\x12?\n\x1cinter_op_p\
    arallelism_threads\x18\x05\x20\x01(\x05R\x19interOpParallelismThreads\
    \x125\n\x17use_per_session_threads\x18\t\x20\x01(\x08R\x14usePerSessionT\
    hreads\x12a\n\x1csession_inter_op_thread_pool\x18\x0c\x20\x03(\x0b2!.ten\
    sorflow.ThreadPoolOptionProtoR\x18sessionInterOpThreadPool\x12)\n\x10pla\
    cement_period\x18\x03\x20\x01(\x05R\x0fplacementPeriod\x12%\n\x0edevice_\
    filters\x18\x04\x20\x03(\tR\rdeviceFilters\x127\n\x0bgpu_options\x18\x06\
    \x20\x01(\x0b2\x16.tensorflow.GPUOptionsR\ngpuOptions\x120\n\x14allow_so\
    ft_placement\x18\x07\x20\x01(\x08R\x12allowSoftPlacement\x120\n\x14log_d\
    evice_placement\x18\x08\x20\x01(\x08R\x12logDevicePlacement\x12=\n\rgrap\
    h_options\x18\n\x20\x01(\x0b2\x18.tensorflow.GraphOptionsR\x0cgraphOptio\
    ns\x125\n\x17operation_timeout_in_ms\x18\x0b\x20\x01(\x03R\x14operationT\
    imeoutInMs\x127\n\x0brpc_options\x18\r\x20\x01(\x0b2\x16.tensorflow.RPCO\
    ptionsR\nrpcOptions\x127\n\x0bcluster_def\x18\x0e\x20\x01(\x0b2\x16.tens\
    orflow.ClusterDefR\nclusterDef\x122\n\x15isolate_session_state\x18\x0f\
    \x20\x01(\x08R\x13isolateSessionState\x12H\n\x0cexperimental\x18\x10\x20\
    \x01(\x0b2$.tensorflow.ConfigProto.ExperimentalR\x0cexperimental\x1a>\n\
    \x10DeviceCountEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01\x1a\xb2\x01\n\x0cEx\
    perimental\x126\n\x17collective_group_leader\x18\x01\x20\x01(\tR\x15coll\
    ectiveGroupLeader\x12E\n\x1fclient_handles_error_formatting\x18\x02\x20\
    \x01(\x08R\x1cclientHandlesErrorFormatting\x12#\n\rexecutor_type\x18\x03\
    \x20\x01(\tR\x0cexecutorType\"\xcd\x04\n\nRunOptions\x12B\n\x0btrace_lev\
    el\x18\x01\x20\x01(\x0e2!.tensorflow.RunOptions.TraceLevelR\ntraceLevel\
    \x12\"\n\rtimeout_in_ms\x18\x02\x20\x01(\x03R\x0btimeoutInMs\x12/\n\x14i\
    nter_op_thread_pool\x18\x03\x20\x01(\x05R\x11interOpThreadPool\x126\n\
    \x17output_partition_graphs\x18\x05\x20\x01(\x08R\x15outputPartitionGrap\
    hs\x12=\n\rdebug_options\x18\x06\x20\x01(\x0b2\x18.tensorflow.DebugOptio\
    nsR\x0cdebugOptions\x12J\n\"report_tensor_allocations_upon_oom\x18\x07\
    \x20\x01(\x08R\x1ereportTensorAllocationsUponOom\x12G\n\x0cexperimental\
    \x18\x08\x20\x01(\x0b2#.tensorflow.RunOptions.ExperimentalR\x0cexperimen\
    tal\x1a@\n\x0cExperimental\x120\n\x14collective_graph_key\x18\x01\x20\
    \x01(\x03R\x12collectiveGraphKey\"R\n\nTraceLevel\x12\x0c\n\x08NO_TRACE\
    \x10\0\x12\x12\n\x0eSOFTWARE_TRACE\x10\x01\x12\x12\n\x0eHARDWARE_TRACE\
    \x10\x02\x12\x0e\n\nFULL_TRACE\x10\x03J\x04\x08\x04\x10\x05\"\xbd\x01\n\
    \x0bRunMetadata\x124\n\nstep_stats\x18\x01\x20\x01(\x0b2\x15.tensorflow.\
    StepStatsR\tstepStats\x127\n\ncost_graph\x18\x02\x20\x01(\x0b2\x18.tenso\
    rflow.CostGraphDefR\tcostGraph\x12?\n\x10partition_graphs\x18\x03\x20\
    \x03(\x0b2\x14.tensorflow.GraphDefR\x0fpartitionGraphs\"P\n\x10TensorCon\
    nection\x12\x1f\n\x0bfrom_tensor\x18\x01\x20\x01(\tR\nfromTensor\x12\x1b\
    \n\tto_tensor\x18\x02\x20\x01(\tR\x08toTensor\"\xa5\x04\n\x0fCallableOpt\
    ions\x12\x12\n\x04feed\x18\x01\x20\x03(\tR\x04feed\x12\x14\n\x05fetch\
    \x18\x02\x20\x03(\tR\x05fetch\x12\x16\n\x06target\x18\x03\x20\x03(\tR\
    \x06target\x127\n\x0brun_options\x18\x04\x20\x01(\x0b2\x16.tensorflow.Ru\
    nOptionsR\nrunOptions\x12I\n\x11tensor_connection\x18\x05\x20\x03(\x0b2\
    \x1c.tensorflow.TensorConnectionR\x10tensorConnection\x12O\n\x0cfeed_dev\
    ices\x18\x06\x20\x03(\x0b2,.tensorflow.CallableOptions.FeedDevicesEntryR\
    \x0bfeedDevices\x12R\n\rfetch_devices\x18\x07\x20\x03(\x0b2-.tensorflow.\
    CallableOptions.FetchDevicesEntryR\x0cfetchDevices\x12&\n\x0ffetch_skip_\
    sync\x18\x08\x20\x01(\x08R\rfetchSkipSync\x1a>\n\x10FeedDevicesEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\tR\x05value:\x028\x01\x1a?\n\x11FetchDevicesEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01Bk\n\x18org.tensorflow.frameworkB\x0cConfigProtosP\x01Z<git\
    hub.com/tensorflow/tensorflow/tensorflow/go/core/protobuf\xf8\x01\x01J\
    \x9f\xca\x01\n\x07\x12\x05\0\0\xbc\x04\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\x08\x12\n\x08\n\x01\x08\x12\x03\x03\0\
    \x1f\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x03\0\x1f\n\x0c\n\x05\x08\xe7\x07\
    \0\x02\x12\x03\x03\x07\x17\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x03\x07\
    \x17\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x03\x07\x17\n\x0c\n\x05\
    \x08\xe7\x07\0\x03\x12\x03\x03\x1a\x1e\n\x08\n\x01\x08\x12\x03\x04\0-\n\
    \x0b\n\x04\x08\xe7\x07\x01\x12\x03\x04\0-\n\x0c\n\x05\x08\xe7\x07\x01\
    \x02\x12\x03\x04\x07\x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x04\x07\
    \x1b\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x04\x07\x1b\n\x0c\n\
    \x05\x08\xe7\x07\x01\x07\x12\x03\x04\x1e,\n\x08\n\x01\x08\x12\x03\x05\0\
    \"\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x05\0\"\n\x0c\n\x05\x08\xe7\x07\
    \x02\x02\x12\x03\x05\x07\x1a\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x05\
    \x07\x1a\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x05\x07\x1a\n\x0c\
    \n\x05\x08\xe7\x07\x02\x03\x12\x03\x05\x1d!\n\x08\n\x01\x08\x12\x03\x06\
    \01\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\x06\01\n\x0c\n\x05\x08\xe7\x07\
    \x03\x02\x12\x03\x06\x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\x06\
    \x07\x13\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\x06\x07\x13\n\x0c\
    \n\x05\x08\xe7\x07\x03\x07\x12\x03\x06\x160\n\x08\n\x01\x08\x12\x03\x07\
    \0S\n\x0b\n\x04\x08\xe7\x07\x04\x12\x03\x07\0S\n\x0c\n\x05\x08\xe7\x07\
    \x04\x02\x12\x03\x07\x07\x11\n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\x07\
    \x07\x11\n\x0e\n\x07\x08\xe7\x07\x04\x02\0\x01\x12\x03\x07\x07\x11\n\x0c\
    \n\x05\x08\xe7\x07\x04\x07\x12\x03\x07\x14R\n\t\n\x02\x03\0\x12\x03\x08\
    \x073\n\t\n\x02\x03\x01\x12\x03\t\x07.\n\t\n\x02\x03\x02\x12\x03\n\x073\
    \n\t\n\x02\x03\x03\x12\x03\x0b\x07-\n\t\n\x02\x03\x04\x12\x03\x0c\x07/\n\
    \t\n\x02\x03\x05\x12\x03\r\x077\n\x0b\n\x02\x04\0\x12\x05\x0f\0\x9c\x01\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\x12\n\xe2\x07\n\x04\x04\0\x02\0\
    \x12\x03!\x02-\x1a\xd4\x07\x20Fraction\x20of\x20the\x20available\x20GPU\
    \x20memory\x20to\x20allocate\x20for\x20each\x20process.\n\x201\x20means\
    \x20to\x20allocate\x20all\x20of\x20the\x20GPU\x20memory,\x200.5\x20means\
    \x20the\x20process\n\x20allocates\x20up\x20to\x20~50%\x20of\x20the\x20av\
    ailable\x20GPU\x20memory.\n\n\x20GPU\x20memory\x20is\x20pre-allocated\
    \x20unless\x20the\x20allow_growth\x20option\x20is\x20enabled.\n\n\x20If\
    \x20greater\x20than\x201.0,\x20uses\x20CUDA\x20unified\x20memory\x20to\
    \x20potentially\x20oversubscribe\n\x20the\x20amount\x20of\x20memory\x20a\
    vailable\x20on\x20the\x20GPU\x20device\x20by\x20using\x20host\x20memory\
    \x20as\x20a\n\x20swap\x20space.\x20Accessing\x20memory\x20not\x20availab\
    le\x20on\x20the\x20device\x20will\x20be\n\x20significantly\x20slower\x20\
    as\x20that\x20would\x20require\x20memory\x20transfer\x20between\x20the\
    \x20host\n\x20and\x20the\x20device.\x20Options\x20to\x20reduce\x20the\
    \x20memory\x20requirement\x20should\x20be\n\x20considered\x20before\x20e\
    nabling\x20this\x20option\x20as\x20this\x20may\x20come\x20with\x20a\x20n\
    egative\n\x20performance\x20impact.\x20Oversubscription\x20using\x20the\
    \x20unified\x20memory\x20requires\n\x20Pascal\x20class\x20or\x20newer\
    \x20GPUs\x20and\x20it\x20is\x20currently\x20only\x20supported\x20on\x20t\
    he\x20Linux\n\x20operating\x20system.\x20See\n\x20https://docs.nvidia.co\
    m/cuda/cuda-c-programming-guide/index.html#um-requirements\n\x20for\x20t\
    he\x20detailed\x20requirements.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04!\x02\
    \x0f\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03!\t(\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03!+,\n\x93\x01\
    \n\x04\x04\0\x02\x01\x12\x03%\x02\x18\x1a\x85\x01\x20If\x20true,\x20the\
    \x20allocator\x20does\x20not\x20pre-allocate\x20the\x20entire\x20specifi\
    ed\n\x20GPU\x20memory\x20region,\x20instead\x20starting\x20small\x20and\
    \x20growing\x20as\x20needed.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04%\x02!\
    -\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03%\x02\x06\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03%\x07\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03%\x16\x17\
    \n\x8b\x02\n\x04\x04\0\x02\x02\x12\x03/\x02\x1c\x1a\xfd\x01\x20The\x20ty\
    pe\x20of\x20GPU\x20allocation\x20strategy\x20to\x20use.\n\n\x20Allowed\
    \x20values:\n\x20\"\":\x20The\x20empty\x20string\x20(default)\x20uses\
    \x20a\x20system-chosen\x20default\n\x20\x20\x20\x20\x20which\x20may\x20c\
    hange\x20over\x20time.\n\n\x20\"BFC\":\x20A\x20\"Best-fit\x20with\x20coa\
    lescing\"\x20algorithm,\x20simplified\x20from\x20a\n\x20\x20\x20\x20\x20\
    \x20\x20\x20version\x20of\x20dlmalloc.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\
    \x04/\x02%\x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03/\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03/\t\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03/\x1a\x1b\n\xb2\x01\n\x04\x04\0\x02\x03\x12\x034\x02$\x1a\xa4\x01\
    \x20Delay\x20deletion\x20of\x20up\x20to\x20this\x20many\x20bytes\x20to\
    \x20reduce\x20the\x20number\x20of\n\x20interactions\x20with\x20gpu\x20dr\
    iver\x20code.\x20\x20If\x200,\x20the\x20system\x20chooses\n\x20a\x20reas\
    onable\x20default\x20(several\x20MBs).\n\n\r\n\x05\x04\0\x02\x03\x04\x12\
    \x044\x02/\x1c\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x034\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x034\x08\x1f\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x034\"#\n\xd8\t\n\x04\x04\0\x02\x04\x12\x03K\x02!\x1a\xca\t\x20A\
    \x20comma-separated\x20list\x20of\x20GPU\x20ids\x20that\x20determines\
    \x20the\x20'visible'\n\x20to\x20'virtual'\x20mapping\x20of\x20GPU\x20dev\
    ices.\x20\x20For\x20example,\x20if\x20TensorFlow\n\x20can\x20see\x208\
    \x20GPU\x20devices\x20in\x20the\x20process,\x20and\x20one\x20wanted\x20t\
    o\x20map\n\x20visible\x20GPU\x20devices\x205\x20and\x203\x20as\x20\"/dev\
    ice:GPU:0\",\x20and\x20\"/device:GPU:1\",\n\x20then\x20one\x20would\x20s\
    pecify\x20this\x20field\x20as\x20\"5,3\".\x20\x20This\x20field\x20is\x20\
    similar\x20in\n\x20spirit\x20to\x20the\x20CUDA_VISIBLE_DEVICES\x20enviro\
    nment\x20variable,\x20except\n\x20it\x20applies\x20to\x20the\x20visible\
    \x20GPU\x20devices\x20in\x20the\x20process.\n\n\x20NOTE:\n\x201.\x20The\
    \x20GPU\x20driver\x20provides\x20the\x20process\x20with\x20the\x20visibl\
    e\x20GPUs\n\x20\x20\x20\x20in\x20an\x20order\x20which\x20is\x20not\x20gu\
    aranteed\x20to\x20have\x20any\x20correlation\x20to\n\x20\x20\x20\x20the\
    \x20*physical*\x20GPU\x20id\x20in\x20the\x20machine.\x20\x20This\x20fiel\
    d\x20is\x20used\x20for\n\x20\x20\x20\x20remapping\x20\"visible\"\x20to\
    \x20\"virtual\",\x20which\x20means\x20this\x20operates\x20only\n\x20\x20\
    \x20\x20after\x20the\x20process\x20starts.\x20\x20Users\x20are\x20requir\
    ed\x20to\x20use\x20vendor\n\x20\x20\x20\x20specific\x20mechanisms\x20(e.\
    g.,\x20CUDA_VISIBLE_DEVICES)\x20to\x20control\x20the\n\x20\x20\x20\x20ph\
    ysical\x20to\x20visible\x20device\x20mapping\x20prior\x20to\x20invoking\
    \x20TensorFlow.\n\x202.\x20In\x20the\x20code,\x20the\x20ids\x20in\x20thi\
    s\x20list\x20are\x20also\x20called\x20\"CUDA\x20GPU\x20id\"s,\n\x20\x20\
    \x20\x20and\x20the\x20'virtual'\x20ids\x20of\x20GPU\x20devices\x20(i.e.\
    \x20the\x20ids\x20in\x20the\x20device\n\x20\x20\x20\x20name\x20\"/device\
    :GPU:<id>\")\x20are\x20also\x20called\x20\"TF\x20GPU\x20id\"s.\x20Please\
    \n\x20\x20\x20\x20refer\x20to\x20third_party/tensorflow/core/common_runt\
    ime/gpu/gpu_id.h\n\x20\x20\x20\x20for\x20more\x20information.\n\n\r\n\
    \x05\x04\0\x02\x04\x04\x12\x04K\x024$\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03K\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03K\t\x1c\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03K\x1f\x20\n\xc1\x01\n\x04\x04\0\x02\x05\x12\
    \x03P\x02'\x1a\xb3\x01\x20In\x20the\x20event\x20polling\x20loop\x20sleep\
    \x20this\x20many\x20microseconds\x20between\n\x20PollEvents\x20calls,\
    \x20when\x20the\x20queue\x20is\x20not\x20empty.\x20\x20If\x20value\x20is\
    \x20not\n\x20set\x20or\x20set\x20to\x200,\x20gets\x20set\x20to\x20a\x20n\
    on-zero\x20default.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04P\x02K!\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03P\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03P\x08\"\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03P%&\n4\n\x04\x04\0\
    \x02\x06\x12\x03S\x02)\x1a'\x20This\x20field\x20is\x20deprecated\x20and\
    \x20ignored.\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04S\x02P'\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03S\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03S\x08$\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03S'(\n\x9a\x05\n\x04\x04\
    \0\x02\x07\x12\x03_\x02\x20\x1a\x8c\x05\x20Force\x20all\x20tensors\x20to\
    \x20be\x20gpu_compatible.\x20On\x20a\x20GPU-enabled\x20TensorFlow,\n\x20\
    enabling\x20this\x20option\x20forces\x20all\x20CPU\x20tensors\x20to\x20b\
    e\x20allocated\x20with\x20Cuda\n\x20pinned\x20memory.\x20Normally,\x20Te\
    nsorFlow\x20will\x20infer\x20which\x20tensors\x20should\x20be\n\x20alloc\
    ated\x20as\x20the\x20pinned\x20memory.\x20But\x20in\x20case\x20where\x20\
    the\x20inference\x20is\n\x20incomplete,\x20this\x20option\x20can\x20sign\
    ificantly\x20speed\x20up\x20the\x20cross-device\x20memory\n\x20copy\x20p\
    erformance\x20as\x20long\x20as\x20it\x20fits\x20the\x20memory.\n\x20Note\
    \x20that\x20this\x20option\x20is\x20not\x20something\x20that\x20should\
    \x20be\n\x20enabled\x20by\x20default\x20for\x20unknown\x20or\x20very\x20\
    large\x20models,\x20since\x20all\x20Cuda\x20pinned\n\x20memory\x20is\x20\
    unpageable,\x20having\x20too\x20much\x20pinned\x20memory\x20might\x20neg\
    atively\x20impact\n\x20the\x20overall\x20host\x20system\x20performance.\
    \n\n\r\n\x05\x04\0\x02\x07\x04\x12\x04_\x02S)\n\x0c\n\x05\x04\0\x02\x07\
    \x05\x12\x03_\x02\x06\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03_\x07\x1b\n\
    \x0c\n\x05\x04\0\x02\x07\x03\x12\x03_\x1e\x1f\n\r\n\x04\x04\0\x03\0\x12\
    \x05a\x02\x96\x01\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03a\n\x16\na\n\
    \x06\x04\0\x03\0\x03\0\x12\x04d\x04n\x05\x1aQ\x20Configuration\x20for\
    \x20breaking\x20down\x20a\x20visible\x20GPU\x20into\x20multiple\x20\"vir\
    tual\"\n\x20devices.\n\n\x0e\n\x07\x04\0\x03\0\x03\0\x01\x12\x03d\x0c\
    \x1a\n\xa5\x03\n\x08\x04\0\x03\0\x03\0\x02\0\x12\x03m\x06)\x1a\x93\x03\
    \x20Per\x20\"virtual\"\x20device\x20memory\x20limit,\x20in\x20MB.\x20The\
    \x20number\x20of\x20elements\x20in\n\x20the\x20list\x20is\x20the\x20numb\
    er\x20of\x20virtual\x20devices\x20to\x20create\x20on\x20the\n\x20corresp\
    onding\x20visible\x20GPU\x20(see\x20\"virtual_devices\"\x20below).\n\x20\
    If\x20empty,\x20it\x20will\x20create\x20single\x20virtual\x20device\x20t\
    aking\x20all\x20available\n\x20memory\x20from\x20the\x20device.\n\n\x20F\
    or\x20the\x20concept\x20of\x20\"visible\"\x20and\x20\"virtual\"\x20GPU,\
    \x20see\x20the\x20comments\x20for\n\x20\"visible_device_list\"\x20above\
    \x20for\x20more\x20information.\n\n\x10\n\t\x04\0\x03\0\x03\0\x02\0\x04\
    \x12\x03m\x06\x0e\n\x10\n\t\x04\0\x03\0\x03\0\x02\0\x05\x12\x03m\x0f\x14\
    \n\x10\n\t\x04\0\x03\0\x03\0\x02\0\x01\x12\x03m\x15$\n\x10\n\t\x04\0\x03\
    \0\x03\0\x02\0\x03\x12\x03m'(\n\xae\t\n\x06\x04\0\x03\0\x02\0\x12\x04\
    \x87\x01\x040\x1a\x9d\t\x20The\x20multi\x20virtual\x20device\x20settings\
    .\x20If\x20empty\x20(not\x20set),\x20it\x20will\x20create\n\x20single\
    \x20virtual\x20device\x20on\x20each\x20visible\x20GPU,\x20according\x20t\
    o\x20the\x20settings\n\x20in\x20\"visible_device_list\"\x20above.\x20Oth\
    erwise,\x20the\x20number\x20of\x20elements\x20in\x20the\n\x20list\x20mus\
    t\x20be\x20the\x20same\x20as\x20the\x20number\x20of\x20visible\x20GPUs\
    \x20(after\n\x20\"visible_device_list\"\x20filtering\x20if\x20it\x20is\
    \x20set),\x20and\x20the\x20string\x20represented\n\x20device\x20names\
    \x20(e.g.\x20/device:GPU:<id>)\x20will\x20refer\x20to\x20the\x20virtual\
    \n\x20devices\x20and\x20have\x20the\x20<id>\x20field\x20assigned\x20sequ\
    entially\x20starting\x20from\x200,\n\x20according\x20to\x20the\x20order\
    \x20they\x20appear\x20in\x20this\x20list\x20and\x20the\x20\"memory_limit\
    \"\n\x20list\x20inside\x20each\x20element.\x20For\x20example,\n\x20\x20\
    \x20visible_device_list\x20=\x20\"1,0\"\n\x20\x20\x20virtual_devices\x20\
    {\x20memory_limit:\x201GB\x20memory_limit:\x202GB\x20}\n\x20\x20\x20virt\
    ual_devices\x20{}\n\x20will\x20create\x20three\x20virtual\x20devices\x20\
    as:\n\x20\x20\x20/device:GPU:0\x20->\x20visible\x20GPU\x201\x20with\x201\
    GB\x20memory\n\x20\x20\x20/device:GPU:1\x20->\x20visible\x20GPU\x201\x20\
    with\x202GB\x20memory\n\x20\x20\x20/device:GPU:2\x20->\x20visible\x20GPU\
    \x200\x20with\x20all\x20available\x20memory\n\n\x20NOTE:\n\x201.\x20It's\
    \x20invalid\x20to\x20set\x20both\x20this\x20and\x20\"per_process_gpu_mem\
    ory_fraction\"\n\x20\x20\x20\x20at\x20the\x20same\x20time.\n\x202.\x20Cu\
    rrently\x20this\x20setting\x20is\x20per-process,\x20not\x20per-session.\
    \x20Using\n\x20\x20\x20\x20different\x20settings\x20in\x20different\x20s\
    essions\x20within\x20same\x20process\x20will\n\x20\x20\x20\x20result\x20\
    in\x20undefined\x20behavior.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04\
    \x87\x01\x04\x0c\n\x0f\n\x07\x04\0\x03\0\x02\0\x06\x12\x04\x87\x01\r\x1b\
    \n\x0f\n\x07\x04\0\x03\0\x02\0\x01\x12\x04\x87\x01\x1c+\n\x0f\n\x07\x04\
    \0\x03\0\x02\0\x03\x12\x04\x87\x01./\n\xe6\x03\n\x06\x04\0\x03\0\x02\x01\
    \x12\x04\x90\x01\x04\x20\x1a\xd5\x03\x20If\x20true,\x20uses\x20CUDA\x20u\
    nified\x20memory\x20for\x20memory\x20allocations.\x20If\n\x20per_process\
    _gpu_memory_fraction\x20option\x20is\x20greater\x20than\x201.0,\x20then\
    \x20unified\n\x20memory\x20is\x20used\x20regardless\x20of\x20the\x20valu\
    e\x20for\x20this\x20field.\x20See\x20comments\x20for\n\x20per_process_gp\
    u_memory_fraction\x20field\x20for\x20more\x20details\x20and\x20requireme\
    nts\n\x20of\x20the\x20unified\x20memory.\x20This\x20option\x20is\x20usef\
    ul\x20to\x20oversubscribe\x20memory\x20if\n\x20multiple\x20processes\x20\
    are\x20sharing\x20a\x20single\x20GPU\x20while\x20individually\x20using\
    \x20less\n\x20than\x201.0\x20per\x20process\x20memory\x20fraction.\n\n\
    \x11\n\x07\x04\0\x03\0\x02\x01\x04\x12\x06\x90\x01\x04\x87\x010\n\x0f\n\
    \x07\x04\0\x03\0\x02\x01\x05\x12\x04\x90\x01\x04\x08\n\x0f\n\x07\x04\0\
    \x03\0\x02\x01\x01\x12\x04\x90\x01\t\x1b\n\x0f\n\x07\x04\0\x03\0\x02\x01\
    \x03\x12\x04\x90\x01\x1e\x1f\n\xa2\x01\n\x06\x04\0\x03\0\x02\x02\x12\x04\
    \x95\x01\x04*\x1a\x91\x01\x20If\x20>\x201,\x20the\x20number\x20of\x20dev\
    ice-to-device\x20copy\x20streams\x20to\x20create\n\x20for\x20each\x20GPU\
    Device.\x20\x20Default\x20value\x20is\x200,\x20which\x20is\x20automatica\
    lly\n\x20converted\x20to\x201.\n\n\x11\n\x07\x04\0\x03\0\x02\x02\x04\x12\
    \x06\x95\x01\x04\x90\x01\x20\n\x0f\n\x07\x04\0\x03\0\x02\x02\x05\x12\x04\
    \x95\x01\x04\t\n\x0f\n\x07\x04\0\x03\0\x02\x02\x01\x12\x04\x95\x01\n%\n\
    \x0f\n\x07\x04\0\x03\0\x02\x02\x03\x12\x04\x95\x01()\n\xa9\x01\n\x04\x04\
    \0\x02\x08\x12\x04\x9b\x01\x02\x20\x1a\x9a\x01\x20Everything\x20inside\
    \x20experimental\x20is\x20subject\x20to\x20change\x20and\x20is\x20not\
    \x20subject\n\x20to\x20API\x20stability\x20guarantees\x20in\n\x20https:/\
    /www.tensorflow.org/guide/version_compat.\n\n\x0f\n\x05\x04\0\x02\x08\
    \x04\x12\x06\x9b\x01\x02\x96\x01\x03\n\r\n\x05\x04\0\x02\x08\x06\x12\x04\
    \x9b\x01\x02\x0e\n\r\n\x05\x04\0\x02\x08\x01\x12\x04\x9b\x01\x0f\x1b\n\r\
    \n\x05\x04\0\x02\x08\x03\x12\x04\x9b\x01\x1e\x1f\n5\n\x02\x04\x01\x12\
    \x06\x9f\x01\0\xcc\x01\x01\x1a'\x20Options\x20passed\x20to\x20the\x20gra\
    ph\x20optimizer\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x9f\x01\x08\x18\nS\n\
    \x04\x04\x01\x02\0\x12\x04\xa1\x01\x02/\x1aE\x20If\x20true,\x20optimize\
    \x20the\x20graph\x20using\x20common\x20subexpression\x20elimination.\n\n\
    \x0f\n\x05\x04\x01\x02\0\x04\x12\x06\xa1\x01\x02\x9f\x01\x1a\n\r\n\x05\
    \x04\x01\x02\0\x05\x12\x04\xa1\x01\x02\x06\n\r\n\x05\x04\x01\x02\0\x01\
    \x12\x04\xa1\x01\x07*\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xa1\x01-.\nL\n\
    \x04\x04\x01\x02\x01\x12\x04\xa4\x01\x02\x1f\x1a>\x20If\x20true,\x20perf\
    orm\x20constant\x20folding\x20optimization\x20on\x20the\x20graph.\n\n\
    \x0f\n\x05\x04\x01\x02\x01\x04\x12\x06\xa4\x01\x02\xa1\x01/\n\r\n\x05\
    \x04\x01\x02\x01\x05\x12\x04\xa4\x01\x02\x06\n\r\n\x05\x04\x01\x02\x01\
    \x01\x12\x04\xa4\x01\x07\x1a\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xa4\
    \x01\x1d\x1e\n\xdc\x02\n\x04\x04\x01\x02\x02\x12\x04\xab\x01\x02)\x1a\
    \xcd\x02\x20Constant\x20folding\x20optimization\x20replaces\x20tensors\
    \x20whose\x20values\x20can\x20be\n\x20predetermined,\x20with\x20constant\
    \x20nodes.\x20To\x20avoid\x20inserting\x20too\x20large\x20constants,\n\
    \x20the\x20size\x20of\x20each\x20constant\x20created\x20can\x20be\x20lim\
    ited.\x20If\x20this\x20value\x20is\x20zero,\x20a\n\x20default\x20limit\
    \x20of\x2010\x20MiB\x20will\x20be\x20applied.\x20If\x20constant\x20foldi\
    ng\x20optimization\n\x20is\x20disabled,\x20this\x20value\x20is\x20ignore\
    d.\n\n\x0f\n\x05\x04\x01\x02\x02\x04\x12\x06\xab\x01\x02\xa4\x01\x1f\n\r\
    \n\x05\x04\x01\x02\x02\x05\x12\x04\xab\x01\x02\x07\n\r\n\x05\x04\x01\x02\
    \x02\x01\x12\x04\xab\x01\x08$\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xab\
    \x01'(\n@\n\x04\x04\x01\x02\x03\x12\x04\xae\x01\x02\x20\x1a2\x20If\x20tr\
    ue,\x20perform\x20function\x20inlining\x20on\x20the\x20graph.\n\n\x0f\n\
    \x05\x04\x01\x02\x03\x04\x12\x06\xae\x01\x02\xab\x01)\n\r\n\x05\x04\x01\
    \x02\x03\x05\x12\x04\xae\x01\x02\x06\n\r\n\x05\x04\x01\x02\x03\x01\x12\
    \x04\xae\x01\x07\x1b\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\xae\x01\x1e\
    \x1f\n$\n\x04\x04\x01\x04\0\x12\x06\xb1\x01\x02\xba\x01\x03\x1a\x14\x20O\
    ptimization\x20level\n\n\r\n\x05\x04\x01\x04\0\x01\x12\x04\xb1\x01\x07\
    \x0c\n\x84\x01\n\x06\x04\x01\x04\0\x02\0\x12\x04\xb6\x01\x04\x0b\x1at\
    \x20L1\x20is\x20the\x20default\x20level.\n\x20Optimization\x20performed\
    \x20at\x20L1\x20:\n\x201.\x20Common\x20subexpression\x20elimination\n\
    \x202.\x20Constant\x20folding\n\n\x0f\n\x07\x04\x01\x04\0\x02\0\x01\x12\
    \x04\xb6\x01\x04\x06\n\x0f\n\x07\x04\x01\x04\0\x02\0\x02\x12\x04\xb6\x01\
    \t\n\n\"\n\x06\x04\x01\x04\0\x02\x01\x12\x04\xb9\x01\x04\x0c\x1a\x12\x20\
    No\x20optimizations\n\n\x0f\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x04\xb9\
    \x01\x04\x06\n\x0f\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x04\xb9\x01\t\x0b\
    \n\xa5\x01\n\x04\x04\x01\x02\x04\x12\x04\xbe\x01\x02\x16\x1a\x96\x01\x20\
    Overall\x20optimization\x20level.\x20The\x20actual\x20optimizations\x20a\
    pplied\x20will\x20be\x20the\n\x20logical\x20OR\x20of\x20the\x20flags\x20\
    that\x20this\x20level\x20implies\x20and\x20any\x20flags\x20already\x20se\
    t.\n\n\x0f\n\x05\x04\x01\x02\x04\x04\x12\x06\xbe\x01\x02\xba\x01\x03\n\r\
    \n\x05\x04\x01\x02\x04\x06\x12\x04\xbe\x01\x02\x07\n\r\n\x05\x04\x01\x02\
    \x04\x01\x12\x04\xbe\x01\x08\x11\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\
    \xbe\x01\x14\x15\nE\n\x04\x04\x01\x04\x01\x12\x06\xc1\x01\x02\xca\x01\
    \x03\x1a5\x20Control\x20the\x20use\x20of\x20the\x20compiler/jit.\x20\x20\
    Experimental.\n\n\r\n\x05\x04\x01\x04\x01\x01\x12\x04\xc1\x01\x07\x15\nL\
    \n\x06\x04\x01\x04\x01\x02\0\x12\x04\xc2\x01\x04\x10\"<\x20Default\x20se\
    tting\x20(\"off\"\x20now,\x20but\x20later\x20expected\x20to\x20be\x20\"o\
    n\")\n\n\x0f\n\x07\x04\x01\x04\x01\x02\0\x01\x12\x04\xc2\x01\x04\x0b\n\
    \x0f\n\x07\x04\x01\x04\x01\x02\0\x02\x12\x04\xc2\x01\x0e\x0f\n\x0e\n\x06\
    \x04\x01\x04\x01\x02\x01\x12\x04\xc3\x01\x04\r\n\x0f\n\x07\x04\x01\x04\
    \x01\x02\x01\x01\x12\x04\xc3\x01\x04\x07\n\x0f\n\x07\x04\x01\x04\x01\x02\
    \x01\x02\x12\x04\xc3\x01\n\x0c\n\x84\x02\n\x06\x04\x01\x04\x01\x02\x02\
    \x12\x04\xc8\x01\x04\r\x1a\xf3\x01\x20The\x20following\x20settings\x20tu\
    rn\x20on\x20compilation,\x20with\x20higher\x20values\x20being\n\x20more\
    \x20aggressive.\x20\x20Higher\x20values\x20may\x20reduce\x20opportunitie\
    s\x20for\x20parallelism\n\x20and\x20may\x20use\x20more\x20memory.\x20\
    \x20(At\x20present,\x20there\x20is\x20no\x20distinction,\x20but\x20this\
    \n\x20is\x20expected\x20to\x20change.)\n\n\x0f\n\x07\x04\x01\x04\x01\x02\
    \x02\x01\x12\x04\xc8\x01\x04\x08\n\x0f\n\x07\x04\x01\x04\x01\x02\x02\x02\
    \x12\x04\xc8\x01\x0b\x0c\n\x0e\n\x06\x04\x01\x04\x01\x02\x03\x12\x04\xc9\
    \x01\x04\r\n\x0f\n\x07\x04\x01\x04\x01\x02\x03\x01\x12\x04\xc9\x01\x04\
    \x08\n\x0f\n\x07\x04\x01\x04\x01\x02\x03\x02\x12\x04\xc9\x01\x0b\x0c\n\
    \x0c\n\x04\x04\x01\x02\x05\x12\x04\xcb\x01\x02&\n\x0f\n\x05\x04\x01\x02\
    \x05\x04\x12\x06\xcb\x01\x02\xca\x01\x03\n\r\n\x05\x04\x01\x02\x05\x06\
    \x12\x04\xcb\x01\x02\x10\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\xcb\x01\
    \x11!\n\r\n\x05\x04\x01\x02\x05\x03\x12\x04\xcb\x01$%\n\x0c\n\x02\x04\
    \x02\x12\x06\xce\x01\0\xfb\x01\x01\n\x0b\n\x03\x04\x02\x01\x12\x04\xce\
    \x01\x08\x14\n4\n\x03\x04\x02\n\x12\x04\xd0\x01\x0b3\x1a'\x20Removed,\
    \x20use\x20optimizer_options\x20below.\n\n\x0c\n\x04\x04\x02\n\0\x12\x04\
    \xd0\x01\x0b2\n\x0b\n\x03\x04\x02\t\x12\x04\xd1\x01\x0b\r\n\x0c\n\x04\
    \x04\x02\t\0\x12\x04\xd1\x01\x0b\x0c\n\r\n\x05\x04\x02\t\0\x01\x12\x04\
    \xd1\x01\x0b\x0c\n\r\n\x05\x04\x02\t\0\x02\x12\x04\xd1\x01\x0b\x0c\ni\n\
    \x04\x04\x02\x02\0\x12\x04\xd5\x01\x02\"\x1a[\x20If\x20true,\x20use\x20c\
    ontrol\x20flow\x20to\x20schedule\x20the\x20activation\x20of\x20Recv\x20n\
    odes.\n\x20(Currently\x20ignored.)\n\n\x0f\n\x05\x04\x02\x02\0\x04\x12\
    \x06\xd5\x01\x02\xd1\x01\r\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\xd5\x01\
    \x02\x06\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xd5\x01\x07\x1d\n\r\n\x05\
    \x04\x02\x02\0\x03\x12\x04\xd5\x01\x20!\n;\n\x04\x04\x02\x02\x01\x12\x04\
    \xd8\x01\x02)\x1a-\x20Options\x20controlling\x20how\x20graph\x20is\x20op\
    timized.\n\n\x0f\n\x05\x04\x02\x02\x01\x04\x12\x06\xd8\x01\x02\xd5\x01\"\
    \n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\xd8\x01\x02\x12\n\r\n\x05\x04\x02\
    \x02\x01\x01\x12\x04\xd8\x01\x13$\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\
    \xd8\x01'(\n\xa8\x01\n\x04\x04\x02\x02\x02\x12\x04\xdd\x01\x02\x1d\x1a\
    \x99\x01\x20The\x20number\x20of\x20steps\x20to\x20run\x20before\x20retur\
    ning\x20a\x20cost\x20model\x20detailing\n\x20the\x20memory\x20usage\x20a\
    nd\x20performance\x20of\x20each\x20node\x20of\x20the\x20graph.\x200\x20m\
    eans\n\x20no\x20cost\x20model.\n\n\x0f\n\x05\x04\x02\x02\x02\x04\x12\x06\
    \xdd\x01\x02\xd8\x01)\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\xdd\x01\x02\
    \x07\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xdd\x01\x08\x18\n\r\n\x05\x04\
    \x02\x02\x02\x03\x12\x04\xdd\x01\x1b\x1c\n]\n\x04\x04\x02\x02\x03\x12\
    \x04\xe1\x01\x02#\x1aO\x20The\x20number\x20of\x20steps\x20to\x20skip\x20\
    before\x20collecting\x20statistics\x20for\x20the\n\x20cost\x20model.\n\n\
    \x0f\n\x05\x04\x02\x02\x03\x04\x12\x06\xe1\x01\x02\xdd\x01\x1d\n\r\n\x05\
    \x04\x02\x02\x03\x05\x12\x04\xe1\x01\x02\x07\n\r\n\x05\x04\x02\x02\x03\
    \x01\x12\x04\xe1\x01\x08\x1e\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\xe1\
    \x01!\"\nk\n\x04\x04\x02\x02\x04\x12\x04\xe5\x01\x02\x18\x1a]\x20Annotat\
    e\x20each\x20Node\x20with\x20Op\x20output\x20shape\x20data,\x20to\x20the\
    \x20extent\x20it\x20can\n\x20be\x20statically\x20inferred.\n\n\x0f\n\x05\
    \x04\x02\x02\x04\x04\x12\x06\xe5\x01\x02\xe1\x01#\n\r\n\x05\x04\x02\x02\
    \x04\x05\x12\x04\xe5\x01\x02\x06\n\r\n\x05\x04\x02\x02\x04\x01\x12\x04\
    \xe5\x01\x07\x13\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\xe5\x01\x16\x17\n\
    \xee\x02\n\x04\x04\x02\x02\x05\x12\x04\xee\x01\x02\x1e\x1a\xdf\x02\x20On\
    ly\x20place\x20the\x20subgraphs\x20that\x20are\x20run,\x20rather\x20than\
    \x20the\x20entire\x20graph.\n\n\x20This\x20is\x20useful\x20for\x20intera\
    ctive\x20graph\x20building,\x20where\x20one\x20might\n\x20produce\x20gra\
    phs\x20that\x20cannot\x20be\x20placed\x20during\x20the\x20debugging\n\
    \x20process.\x20\x20In\x20particular,\x20it\x20allows\x20the\x20client\
    \x20to\x20continue\x20work\x20in\n\x20a\x20session\x20after\x20adding\
    \x20a\x20node\x20to\x20a\x20graph\x20whose\x20placement\n\x20constraints\
    \x20are\x20unsatisfiable.\n\n\x0f\n\x05\x04\x02\x02\x05\x04\x12\x06\xee\
    \x01\x02\xe5\x01\x18\n\r\n\x05\x04\x02\x02\x05\x05\x12\x04\xee\x01\x02\
    \x06\n\r\n\x05\x04\x02\x02\x05\x01\x12\x04\xee\x01\x07\x19\n\r\n\x05\x04\
    \x02\x02\x05\x03\x12\x04\xee\x01\x1c\x1d\nM\n\x04\x04\x02\x02\x06\x12\
    \x04\xf1\x01\x02$\x1a?\x20If\x20true,\x20transfer\x20float\x20values\x20\
    between\x20processes\x20as\x20bfloat16.\n\n\x0f\n\x05\x04\x02\x02\x06\
    \x04\x12\x06\xf1\x01\x02\xee\x01\x1e\n\r\n\x05\x04\x02\x02\x06\x05\x12\
    \x04\xf1\x01\x02\x06\n\r\n\x05\x04\x02\x02\x06\x01\x12\x04\xf1\x01\x07\
    \x1f\n\r\n\x05\x04\x02\x02\x06\x03\x12\x04\xf1\x01\"#\n~\n\x04\x04\x02\
    \x02\x07\x12\x04\xf5\x01\x02\x1a\x1ap\x20If\x20>\x200,\x20record\x20a\
    \x20timeline\x20every\x20this\x20many\x20steps.\n\x20EXPERIMENTAL:\x20Th\
    is\x20currently\x20has\x20no\x20effect\x20in\x20MasterSession.\n\n\x0f\n\
    \x05\x04\x02\x02\x07\x04\x12\x06\xf5\x01\x02\xf1\x01$\n\r\n\x05\x04\x02\
    \x02\x07\x05\x12\x04\xf5\x01\x02\x07\n\r\n\x05\x04\x02\x02\x07\x01\x12\
    \x04\xf5\x01\x08\x15\n\r\n\x05\x04\x02\x02\x07\x03\x12\x04\xf5\x01\x18\
    \x19\n\xd8\x01\n\x04\x04\x02\x02\x08\x12\x04\xfa\x01\x02&\x1a\xc9\x01\
    \x20Options\x20that\x20control\x20the\x20type\x20and\x20amount\x20of\x20\
    graph\x20rewriting.\n\x20Not\x20currently\x20configurable\x20via\x20the\
    \x20public\x20Python\x20API\x20(i.e.\x20there\x20is\x20no\x20API\n\x20st\
    ability\x20guarantee\x20if\x20you\x20import\x20RewriterConfig\x20explici\
    tly).\n\n\x0f\n\x05\x04\x02\x02\x08\x04\x12\x06\xfa\x01\x02\xf5\x01\x1a\
    \n\r\n\x05\x04\x02\x02\x08\x06\x12\x04\xfa\x01\x02\x10\n\r\n\x05\x04\x02\
    \x02\x08\x01\x12\x04\xfa\x01\x11\x20\n\r\n\x05\x04\x02\x02\x08\x03\x12\
    \x04\xfa\x01#%\n\x0c\n\x02\x04\x03\x12\x06\xfd\x01\0\x94\x02\x01\n\x0b\n\
    \x03\x04\x03\x01\x12\x04\xfd\x01\x08\x1d\n\xbb\x01\n\x04\x04\x03\x02\0\
    \x12\x04\x82\x02\x02\x18\x1a\xac\x01\x20The\x20number\x20of\x20threads\
    \x20in\x20the\x20pool.\n\n\x200\x20means\x20the\x20system\x20picks\x20a\
    \x20value\x20based\x20on\x20where\x20this\x20option\x20proto\x20is\x20us\
    ed\n\x20(see\x20the\x20declaration\x20of\x20the\x20specific\x20field\x20\
    for\x20more\x20info).\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\x82\x02\
    \x02\xfd\x01\x1f\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x82\x02\x02\x07\n\r\
    \n\x05\x04\x03\x02\0\x01\x12\x04\x82\x02\x08\x13\n\r\n\x05\x04\x03\x02\0\
    \x03\x12\x04\x82\x02\x16\x17\n\xf7\x05\n\x04\x04\x03\x02\x01\x12\x04\x93\
    \x02\x02\x19\x1a\xe8\x05\x20The\x20global\x20name\x20of\x20the\x20thread\
    pool.\n\n\x20If\x20empty,\x20then\x20the\x20threadpool\x20is\x20made\x20\
    and\x20used\x20according\x20to\x20the\x20scope\x20it's\n\x20in\x20-\x20e\
    .g.,\x20for\x20a\x20session\x20threadpool,\x20it\x20is\x20used\x20by\x20\
    that\x20session\x20only.\n\n\x20If\x20non-empty,\x20then:\n\x20-\x20a\
    \x20global\x20threadpool\x20associated\x20with\x20this\x20name\x20is\x20\
    looked\n\x20\x20\x20up\x20or\x20created.\x20This\x20allows,\x20for\x20ex\
    ample,\x20sharing\x20one\x20threadpool\x20across\n\x20\x20\x20many\x20se\
    ssions\x20(e.g.,\x20like\x20the\x20default\x20behavior,\x20if\n\x20\x20\
    \x20inter_op_parallelism_threads\x20is\x20not\x20configured),\x20but\x20\
    still\x20partitioning\n\x20\x20\x20into\x20a\x20large\x20and\x20small\
    \x20pool.\n\x20-\x20if\x20the\x20threadpool\x20for\x20this\x20global_nam\
    e\x20already\x20exists,\x20then\x20it\x20is\x20an\n\x20\x20\x20error\x20\
    if\x20the\x20existing\x20pool\x20was\x20created\x20using\x20a\x20differe\
    nt\x20num_threads\n\x20\x20\x20value\x20as\x20is\x20specified\x20on\x20t\
    his\x20call.\n\x20-\x20threadpools\x20created\x20this\x20way\x20are\x20n\
    ever\x20garbage\x20collected.\n\n\x0f\n\x05\x04\x03\x02\x01\x04\x12\x06\
    \x93\x02\x02\x82\x02\x18\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x93\x02\
    \x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x93\x02\t\x14\n\r\n\x05\
    \x04\x03\x02\x01\x03\x12\x04\x93\x02\x17\x18\n\x0c\n\x02\x04\x04\x12\x06\
    \x96\x02\0\x9d\x02\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\x96\x02\x08\x12\n\
    \x88\x02\n\x04\x04\x04\x02\0\x12\x04\x9c\x02\x02(\x1a\xf9\x01\x20If\x20t\
    rue,\x20always\x20use\x20RPC\x20to\x20contact\x20the\x20session\x20targe\
    t.\n\n\x20If\x20false\x20(the\x20default\x20option),\x20TensorFlow\x20ma\
    y\x20use\x20an\x20optimized\n\x20transport\x20for\x20client-master\x20co\
    mmunication\x20that\x20avoids\x20the\x20RPC\n\x20stack.\x20This\x20optio\
    n\x20is\x20primarily\x20for\x20used\x20testing\x20the\x20RPC\x20stack.\n\
    \n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\x9c\x02\x02\x96\x02\x14\n\r\n\x05\
    \x04\x04\x02\0\x05\x12\x04\x9c\x02\x02\x06\n\r\n\x05\x04\x04\x02\0\x01\
    \x12\x04\x9c\x02\x07#\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x9c\x02&'\ns\n\
    \x02\x04\x05\x12\x06\xa1\x02\0\x94\x03\x01\x1ae\x20Session\x20configurat\
    ion\x20parameters.\n\x20The\x20system\x20picks\x20appropriate\x20values\
    \x20for\x20fields\x20that\x20are\x20not\x20set.\n\n\x0b\n\x03\x04\x05\
    \x01\x12\x04\xa1\x02\x08\x13\n\xd5\x01\n\x04\x04\x05\x02\0\x12\x04\xa6\
    \x02\x02&\x1a\xc6\x01\x20Map\x20from\x20device\x20type\x20name\x20(e.g.,\
    \x20\"CPU\"\x20or\x20\"GPU\"\x20)\x20to\x20maximum\n\x20number\x20of\x20\
    devices\x20of\x20that\x20type\x20to\x20use.\x20\x20If\x20a\x20particular\
    \x20device\n\x20type\x20is\x20not\x20found\x20in\x20the\x20map,\x20the\
    \x20system\x20picks\x20an\x20appropriate\n\x20number.\n\n\x0f\n\x05\x04\
    \x05\x02\0\x04\x12\x06\xa6\x02\x02\xa1\x02\x15\n\r\n\x05\x04\x05\x02\0\
    \x06\x12\x04\xa6\x02\x02\x14\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xa6\x02\
    \x15!\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xa6\x02$%\n\xb7\x01\n\x04\x04\
    \x05\x02\x01\x12\x04\xab\x02\x02)\x1a\xa8\x01\x20The\x20execution\x20of\
    \x20an\x20individual\x20op\x20(for\x20some\x20op\x20types)\x20can\x20be\
    \n\x20parallelized\x20on\x20a\x20pool\x20of\x20intra_op_parallelism_thre\
    ads.\n\x200\x20means\x20the\x20system\x20picks\x20an\x20appropriate\x20n\
    umber.\n\n\x0f\n\x05\x04\x05\x02\x01\x04\x12\x06\xab\x02\x02\xa6\x02&\n\
    \r\n\x05\x04\x05\x02\x01\x05\x12\x04\xab\x02\x02\x07\n\r\n\x05\x04\x05\
    \x02\x01\x01\x12\x04\xab\x02\x08$\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\
    \xab\x02'(\n\xfc\x02\n\x04\x04\x05\x02\x02\x12\x04\xb5\x02\x02)\x1a\xed\
    \x02\x20Nodes\x20that\x20perform\x20blocking\x20operations\x20are\x20enq\
    ueued\x20on\x20a\x20pool\x20of\n\x20inter_op_parallelism_threads\x20avai\
    lable\x20in\x20each\x20process.\n\n\x200\x20means\x20the\x20system\x20pi\
    cks\x20an\x20appropriate\x20number.\n\n\x20Note\x20that\x20the\x20first\
    \x20Session\x20created\x20in\x20the\x20process\x20sets\x20the\n\x20numbe\
    r\x20of\x20threads\x20for\x20all\x20future\x20sessions\x20unless\x20use_\
    per_session_threads\x20is\n\x20true\x20or\x20session_inter_op_thread_poo\
    l\x20is\x20configured.\n\n\x0f\n\x05\x04\x05\x02\x02\x04\x12\x06\xb5\x02\
    \x02\xab\x02)\n\r\n\x05\x04\x05\x02\x02\x05\x12\x04\xb5\x02\x02\x07\n\r\
    \n\x05\x04\x05\x02\x02\x01\x12\x04\xb5\x02\x08$\n\r\n\x05\x04\x05\x02\
    \x02\x03\x12\x04\xb5\x02'(\n\xd0\x03\n\x04\x04\x05\x02\x03\x12\x04\xc0\
    \x02\x02#\x1a\xc1\x03\x20If\x20true,\x20use\x20a\x20new\x20set\x20of\x20\
    threads\x20for\x20this\x20session\x20rather\x20than\x20the\x20global\n\
    \x20pool\x20of\x20threads.\x20Only\x20supported\x20by\x20direct\x20sessi\
    ons.\n\n\x20If\x20false,\x20use\x20the\x20global\x20threads\x20created\
    \x20by\x20the\x20first\x20session,\x20or\x20the\n\x20per-session\x20thre\
    ad\x20pools\x20configured\x20by\x20session_inter_op_thread_pool.\n\n\x20\
    This\x20option\x20is\x20deprecated.\x20The\x20same\x20effect\x20can\x20b\
    e\x20achieved\x20by\x20setting\n\x20session_inter_op_thread_pool\x20to\
    \x20have\x20one\x20element,\x20whose\x20num_threads\x20equals\n\x20inter\
    _op_parallelism_threads.\n\n\x0f\n\x05\x04\x05\x02\x03\x04\x12\x06\xc0\
    \x02\x02\xb5\x02)\n\r\n\x05\x04\x05\x02\x03\x05\x12\x04\xc0\x02\x02\x06\
    \n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xc0\x02\x07\x1e\n\r\n\x05\x04\x05\
    \x02\x03\x03\x12\x04\xc0\x02!\"\n\x91\x08\n\x04\x04\x05\x02\x04\x12\x04\
    \xd5\x02\x02C\x1a\x82\x08\x20This\x20option\x20is\x20experimental\x20-\
    \x20it\x20may\x20be\x20replaced\x20with\x20a\x20different\x20mechanism\n\
    \x20in\x20the\x20future.\n\n\x20Configures\x20session\x20thread\x20pools\
    .\x20If\x20this\x20is\x20configured,\x20then\x20RunOptions\x20for\n\x20a\
    \x20Run\x20call\x20can\x20select\x20the\x20thread\x20pool\x20to\x20use.\
    \n\n\x20The\x20intended\x20use\x20is\x20for\x20when\x20some\x20session\
    \x20invocations\x20need\x20to\x20run\x20in\x20a\n\x20background\x20pool\
    \x20limited\x20to\x20a\x20small\x20number\x20of\x20threads:\n\x20-\x20Fo\
    r\x20example,\x20a\x20session\x20may\x20be\x20configured\x20to\x20have\
    \x20one\x20large\x20pool\x20(for\n\x20regular\x20compute)\x20and\x20one\
    \x20small\x20pool\x20(for\x20periodic,\x20low\x20priority\x20work);\n\
    \x20using\x20the\x20small\x20pool\x20is\x20currently\x20the\x20mechanism\
    \x20for\x20limiting\x20the\x20inter-op\n\x20parallelism\x20of\x20the\x20\
    low\x20priority\x20work.\x20\x20Note\x20that\x20it\x20does\x20not\x20lim\
    it\x20the\n\x20parallelism\x20of\x20work\x20spawned\x20by\x20a\x20single\
    \x20op\x20kernel\x20implementation.\n\x20-\x20Using\x20this\x20setting\
    \x20is\x20normally\x20not\x20needed\x20in\x20training,\x20but\x20may\x20\
    help\x20some\n\x20serving\x20use\x20cases.\n\x20-\x20It\x20is\x20also\
    \x20generally\x20recommended\x20to\x20set\x20the\x20global_name\x20field\
    \x20of\x20this\n\x20proto,\x20to\x20avoid\x20creating\x20multiple\x20lar\
    ge\x20pools.\x20It\x20is\x20typically\x20better\x20to\n\x20run\x20the\
    \x20non-low-priority\x20work,\x20even\x20across\x20sessions,\x20in\x20a\
    \x20single\x20large\n\x20pool.\n\n\r\n\x05\x04\x05\x02\x04\x04\x12\x04\
    \xd5\x02\x02\n\n\r\n\x05\x04\x05\x02\x04\x06\x12\x04\xd5\x02\x0b\x20\n\r\
    \n\x05\x04\x05\x02\x04\x01\x12\x04\xd5\x02!=\n\r\n\x05\x04\x05\x02\x04\
    \x03\x12\x04\xd5\x02@B\n\xbd\x01\n\x04\x04\x05\x02\x05\x12\x04\xda\x02\
    \x02\x1d\x1a\xae\x01\x20Assignment\x20of\x20Nodes\x20to\x20Devices\x20is\
    \x20recomputed\x20every\x20placement_period\n\x20steps\x20until\x20the\
    \x20system\x20warms\x20up\x20(at\x20which\x20point\x20the\x20recomputati\
    on\n\x20typically\x20slows\x20down\x20automatically).\n\n\x0f\n\x05\x04\
    \x05\x02\x05\x04\x12\x06\xda\x02\x02\xd5\x02C\n\r\n\x05\x04\x05\x02\x05\
    \x05\x12\x04\xda\x02\x02\x07\n\r\n\x05\x04\x05\x02\x05\x01\x12\x04\xda\
    \x02\x08\x18\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\xda\x02\x1b\x1c\n\xc5\
    \x01\n\x04\x04\x05\x02\x06\x12\x04\xdf\x02\x02%\x1a\xb6\x01\x20When\x20a\
    ny\x20filters\x20are\x20present\x20sessions\x20will\x20ignore\x20all\x20\
    devices\x20which\x20do\x20not\n\x20match\x20the\x20filters.\x20Each\x20f\
    ilter\x20can\x20be\x20partially\x20specified,\x20e.g.\x20\"/job:ps\"\n\
    \x20\"/job:worker/replica:3\",\x20etc.\n\n\r\n\x05\x04\x05\x02\x06\x04\
    \x12\x04\xdf\x02\x02\n\n\r\n\x05\x04\x05\x02\x06\x05\x12\x04\xdf\x02\x0b\
    \x11\n\r\n\x05\x04\x05\x02\x06\x01\x12\x04\xdf\x02\x12\x20\n\r\n\x05\x04\
    \x05\x02\x06\x03\x12\x04\xdf\x02#$\n/\n\x04\x04\x05\x02\x07\x12\x04\xe2\
    \x02\x02\x1d\x1a!\x20Options\x20that\x20apply\x20to\x20all\x20GPUs.\n\n\
    \x0f\n\x05\x04\x05\x02\x07\x04\x12\x06\xe2\x02\x02\xdf\x02%\n\r\n\x05\
    \x04\x05\x02\x07\x06\x12\x04\xe2\x02\x02\x0c\n\r\n\x05\x04\x05\x02\x07\
    \x01\x12\x04\xe2\x02\r\x18\n\r\n\x05\x04\x05\x02\x07\x03\x12\x04\xe2\x02\
    \x1b\x1c\n\x9a\x02\n\x04\x04\x05\x02\x08\x12\x04\xeb\x02\x02\x20\x1a\x8b\
    \x02\x20Whether\x20soft\x20placement\x20is\x20allowed.\x20If\x20allow_so\
    ft_placement\x20is\x20true,\n\x20an\x20op\x20will\x20be\x20placed\x20on\
    \x20CPU\x20if\n\x20\x20\x201.\x20there's\x20no\x20GPU\x20implementation\
    \x20for\x20the\x20OP\n\x20or\n\x20\x20\x202.\x20no\x20GPU\x20devices\x20\
    are\x20known\x20or\x20registered\n\x20or\n\x20\x20\x203.\x20need\x20to\
    \x20co-locate\x20with\x20reftype\x20input(s)\x20which\x20are\x20from\x20\
    CPU.\n\n\x0f\n\x05\x04\x05\x02\x08\x04\x12\x06\xeb\x02\x02\xe2\x02\x1d\n\
    \r\n\x05\x04\x05\x02\x08\x05\x12\x04\xeb\x02\x02\x06\n\r\n\x05\x04\x05\
    \x02\x08\x01\x12\x04\xeb\x02\x07\x1b\n\r\n\x05\x04\x05\x02\x08\x03\x12\
    \x04\xeb\x02\x1e\x1f\n;\n\x04\x04\x05\x02\t\x12\x04\xee\x02\x02\x20\x1a-\
    \x20Whether\x20device\x20placements\x20should\x20be\x20logged.\n\n\x0f\n\
    \x05\x04\x05\x02\t\x04\x12\x06\xee\x02\x02\xeb\x02\x20\n\r\n\x05\x04\x05\
    \x02\t\x05\x12\x04\xee\x02\x02\x06\n\r\n\x05\x04\x05\x02\t\x01\x12\x04\
    \xee\x02\x07\x1b\n\r\n\x05\x04\x05\x02\t\x03\x12\x04\xee\x02\x1e\x1f\n1\
    \n\x04\x04\x05\x02\n\x12\x04\xf1\x02\x02\"\x1a#\x20Options\x20that\x20ap\
    ply\x20to\x20all\x20graphs.\n\n\x0f\n\x05\x04\x05\x02\n\x04\x12\x06\xf1\
    \x02\x02\xee\x02\x20\n\r\n\x05\x04\x05\x02\n\x06\x12\x04\xf1\x02\x02\x0e\
    \n\r\n\x05\x04\x05\x02\n\x01\x12\x04\xf1\x02\x0f\x1c\n\r\n\x05\x04\x05\
    \x02\n\x03\x12\x04\xf1\x02\x1f!\n\xce\x01\n\x04\x04\x05\x02\x0b\x12\x04\
    \xf6\x02\x02%\x1a\xbf\x01\x20Global\x20timeout\x20for\x20all\x20blocking\
    \x20operations\x20in\x20this\x20session.\x20\x20If\x20non-zero,\n\x20and\
    \x20not\x20overridden\x20on\x20a\x20per-operation\x20basis,\x20this\x20v\
    alue\x20will\x20be\x20used\x20as\x20the\n\x20deadline\x20for\x20all\x20b\
    locking\x20operations.\n\n\x0f\n\x05\x04\x05\x02\x0b\x04\x12\x06\xf6\x02\
    \x02\xf1\x02\"\n\r\n\x05\x04\x05\x02\x0b\x05\x12\x04\xf6\x02\x02\x07\n\r\
    \n\x05\x04\x05\x02\x0b\x01\x12\x04\xf6\x02\x08\x1f\n\r\n\x05\x04\x05\x02\
    \x0b\x03\x12\x04\xf6\x02\"$\nR\n\x04\x04\x05\x02\x0c\x12\x04\xf9\x02\x02\
    \x1e\x1aD\x20Options\x20that\x20apply\x20when\x20this\x20session\x20uses\
    \x20the\x20distributed\x20runtime.\n\n\x0f\n\x05\x04\x05\x02\x0c\x04\x12\
    \x06\xf9\x02\x02\xf6\x02%\n\r\n\x05\x04\x05\x02\x0c\x06\x12\x04\xf9\x02\
    \x02\x0c\n\r\n\x05\x04\x05\x02\x0c\x01\x12\x04\xf9\x02\r\x18\n\r\n\x05\
    \x04\x05\x02\x0c\x03\x12\x04\xf9\x02\x1b\x1d\nD\n\x04\x04\x05\x02\r\x12\
    \x04\xfc\x02\x02\x1e\x1a6\x20Optional\x20list\x20of\x20all\x20workers\
    \x20to\x20use\x20in\x20this\x20session.\n\n\x0f\n\x05\x04\x05\x02\r\x04\
    \x12\x06\xfc\x02\x02\xf9\x02\x1e\n\r\n\x05\x04\x05\x02\r\x06\x12\x04\xfc\
    \x02\x02\x0c\n\r\n\x05\x04\x05\x02\r\x01\x12\x04\xfc\x02\r\x18\n\r\n\x05\
    \x04\x05\x02\r\x03\x12\x04\xfc\x02\x1b\x1d\nu\n\x04\x04\x05\x02\x0e\x12\
    \x04\x80\x03\x02\"\x1ag\x20If\x20true,\x20any\x20resources\x20such\x20as\
    \x20Variables\x20used\x20in\x20the\x20session\x20will\x20not\x20be\n\x20\
    shared\x20with\x20other\x20sessions.\n\n\x0f\n\x05\x04\x05\x02\x0e\x04\
    \x12\x06\x80\x03\x02\xfc\x02\x1e\n\r\n\x05\x04\x05\x02\x0e\x05\x12\x04\
    \x80\x03\x02\x06\n\r\n\x05\x04\x05\x02\x0e\x01\x12\x04\x80\x03\x07\x1c\n\
    \r\n\x05\x04\x05\x02\x0e\x03\x12\x04\x80\x03\x1f!\n\xab\x01\n\x04\x04\
    \x05\x03\x01\x12\x06\x85\x03\x02\x8f\x03\x03\x1a\x9a\x01\x20Everything\
    \x20inside\x20Experimental\x20is\x20subject\x20to\x20change\x20and\x20is\
    \x20not\x20subject\n\x20to\x20API\x20stability\x20guarantees\x20in\n\x20\
    https://www.tensorflow.org/guide/version_compat.\n\n\r\n\x05\x04\x05\x03\
    \x01\x01\x12\x04\x85\x03\n\x16\n1\n\x06\x04\x05\x03\x01\x02\0\x12\x04\
    \x87\x03\x04'\x1a!\x20Task\x20name\x20for\x20group\x20resolution.\n\n\
    \x11\n\x07\x04\x05\x03\x01\x02\0\x04\x12\x06\x87\x03\x04\x85\x03\x18\n\
    \x0f\n\x07\x04\x05\x03\x01\x02\0\x05\x12\x04\x87\x03\x04\n\n\x0f\n\x07\
    \x04\x05\x03\x01\x02\0\x01\x12\x04\x87\x03\x0b\"\n\x0f\n\x07\x04\x05\x03\
    \x01\x02\0\x03\x12\x04\x87\x03%&\n\x95\x01\n\x06\x04\x05\x03\x01\x02\x01\
    \x12\x04\x8a\x03\x04-\x1a\x84\x01\x20Whether\x20the\x20client\x20will\
    \x20format\x20templated\x20errors.\x20For\x20example,\x20the\x20string:\
    \n\x20\"The\x20node\x20was\x20defined\x20on\x20^^node:Foo:${file}:${line\
    }^^\".\n\n\x11\n\x07\x04\x05\x03\x01\x02\x01\x04\x12\x06\x8a\x03\x04\x87\
    \x03'\n\x0f\n\x07\x04\x05\x03\x01\x02\x01\x05\x12\x04\x8a\x03\x04\x08\n\
    \x0f\n\x07\x04\x05\x03\x01\x02\x01\x01\x12\x04\x8a\x03\t(\n\x0f\n\x07\
    \x04\x05\x03\x01\x02\x01\x03\x12\x04\x8a\x03+,\nq\n\x06\x04\x05\x03\x01\
    \x02\x02\x12\x04\x8e\x03\x04\x1d\x1aa\x20Which\x20executor\x20to\x20use,\
    \x20the\x20default\x20executor\x20will\x20be\x20used\n\x20if\x20it\x20is\
    \x20an\x20empty\x20string\x20or\x20\"DEFAULT\"\n\n\x11\n\x07\x04\x05\x03\
    \x01\x02\x02\x04\x12\x06\x8e\x03\x04\x8a\x03-\n\x0f\n\x07\x04\x05\x03\
    \x01\x02\x02\x05\x12\x04\x8e\x03\x04\n\n\x0f\n\x07\x04\x05\x03\x01\x02\
    \x02\x01\x12\x04\x8e\x03\x0b\x18\n\x0f\n\x07\x04\x05\x03\x01\x02\x02\x03\
    \x12\x04\x8e\x03\x1b\x1c\n\x0c\n\x04\x04\x05\x02\x0f\x12\x04\x91\x03\x02\
    !\n\x0f\n\x05\x04\x05\x02\x0f\x04\x12\x06\x91\x03\x02\x8f\x03\x04\n\r\n\
    \x05\x04\x05\x02\x0f\x06\x12\x04\x91\x03\x02\x0e\n\r\n\x05\x04\x05\x02\
    \x0f\x01\x12\x04\x91\x03\x0f\x1b\n\r\n\x05\x04\x05\x02\x0f\x03\x12\x04\
    \x91\x03\x1e\x20\n0\n\x02\x04\x06\x12\x06\x97\x03\0\xc9\x03\x01\x1a\"\
    \x20Options\x20for\x20a\x20single\x20Run()\x20call.\n\n\x0b\n\x03\x04\
    \x06\x01\x12\x04\x97\x03\x08\x12\n\x84\x01\n\x04\x04\x06\x04\0\x12\x06\
    \x9a\x03\x02\x9f\x03\x03\x1at\x20TODO(pbar)\x20Turn\x20this\x20into\x20a\
    \x20TraceOptions\x20proto\x20which\x20allows\n\x20tracing\x20to\x20be\
    \x20controlled\x20in\x20a\x20more\x20orthogonal\x20manner?\n\n\r\n\x05\
    \x04\x06\x04\0\x01\x12\x04\x9a\x03\x07\x11\n\x0e\n\x06\x04\x06\x04\0\x02\
    \0\x12\x04\x9b\x03\x04\x11\n\x0f\n\x07\x04\x06\x04\0\x02\0\x01\x12\x04\
    \x9b\x03\x04\x0c\n\x0f\n\x07\x04\x06\x04\0\x02\0\x02\x12\x04\x9b\x03\x0f\
    \x10\n\x0e\n\x06\x04\x06\x04\0\x02\x01\x12\x04\x9c\x03\x04\x17\n\x0f\n\
    \x07\x04\x06\x04\0\x02\x01\x01\x12\x04\x9c\x03\x04\x12\n\x0f\n\x07\x04\
    \x06\x04\0\x02\x01\x02\x12\x04\x9c\x03\x15\x16\n\x0e\n\x06\x04\x06\x04\0\
    \x02\x02\x12\x04\x9d\x03\x04\x17\n\x0f\n\x07\x04\x06\x04\0\x02\x02\x01\
    \x12\x04\x9d\x03\x04\x12\n\x0f\n\x07\x04\x06\x04\0\x02\x02\x02\x12\x04\
    \x9d\x03\x15\x16\n\x0e\n\x06\x04\x06\x04\0\x02\x03\x12\x04\x9e\x03\x04\
    \x13\n\x0f\n\x07\x04\x06\x04\0\x02\x03\x01\x12\x04\x9e\x03\x04\x0e\n\x0f\
    \n\x07\x04\x06\x04\0\x02\x03\x02\x12\x04\x9e\x03\x11\x12\n\x0c\n\x04\x04\
    \x06\x02\0\x12\x04\xa0\x03\x02\x1d\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\
    \xa0\x03\x02\x9f\x03\x03\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\xa0\x03\x02\
    \x0c\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xa0\x03\r\x18\n\r\n\x05\x04\x06\
    \x02\0\x03\x12\x04\xa0\x03\x1b\x1c\nG\n\x04\x04\x06\x02\x01\x12\x04\xa3\
    \x03\x02\x1a\x1a9\x20Time\x20to\x20wait\x20for\x20operation\x20to\x20com\
    plete\x20in\x20milliseconds.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\
    \xa3\x03\x02\xa0\x03\x1d\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xa3\x03\
    \x02\x07\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xa3\x03\x08\x15\n\r\n\x05\
    \x04\x06\x02\x01\x03\x12\x04\xa3\x03\x18\x19\n\x9d\x03\n\x04\x04\x06\x02\
    \x02\x12\x04\xab\x03\x02!\x1a\x8e\x03\x20The\x20thread\x20pool\x20to\x20\
    use,\x20if\x20session_inter_op_thread_pool\x20is\x20configured.\n\x20To\
    \x20use\x20the\x20caller\x20thread\x20set\x20this\x20to\x20-1\x20-\x20th\
    is\x20uses\x20the\x20caller\x20thread\n\x20to\x20execute\x20Session::Run\
    ()\x20and\x20thus\x20avoids\x20a\x20context\x20switch.\x20Using\x20the\n\
    \x20caller\x20thread\x20to\x20execute\x20Session::Run()\x20should\x20be\
    \x20done\x20ONLY\x20for\x20simple\n\x20graphs,\x20where\x20the\x20overhe\
    ad\x20of\x20an\x20additional\x20context\x20switch\x20is\n\x20comparable\
    \x20with\x20the\x20overhead\x20of\x20Session::Run().\n\n\x0f\n\x05\x04\
    \x06\x02\x02\x04\x12\x06\xab\x03\x02\xa3\x03\x1a\n\r\n\x05\x04\x06\x02\
    \x02\x05\x12\x04\xab\x03\x02\x07\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\
    \xab\x03\x08\x1c\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\xab\x03\x1f\x20\n\
    p\n\x04\x04\x06\x02\x03\x12\x04\xaf\x03\x02#\x1ab\x20Whether\x20the\x20p\
    artition\x20graph(s)\x20executed\x20by\x20the\x20executor(s)\x20should\
    \x20be\n\x20outputted\x20via\x20RunMetadata.\n\n\x0f\n\x05\x04\x06\x02\
    \x03\x04\x12\x06\xaf\x03\x02\xab\x03!\n\r\n\x05\x04\x06\x02\x03\x05\x12\
    \x04\xaf\x03\x02\x06\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\xaf\x03\x07\
    \x1e\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\xaf\x03!\"\nT\n\x04\x04\x06\
    \x02\x04\x12\x04\xb2\x03\x02!\x1aF\x20EXPERIMENTAL.\x20\x20Options\x20us\
    ed\x20to\x20initialize\x20DebuggerState,\x20if\x20enabled.\n\n\x0f\n\x05\
    \x04\x06\x02\x04\x04\x12\x06\xb2\x03\x02\xaf\x03#\n\r\n\x05\x04\x06\x02\
    \x04\x06\x12\x04\xb2\x03\x02\x0e\n\r\n\x05\x04\x06\x02\x04\x01\x12\x04\
    \xb2\x03\x0f\x1c\n\r\n\x05\x04\x06\x02\x04\x03\x12\x04\xb2\x03\x1f\x20\n\
    \xe7\x01\n\x04\x04\x06\x02\x05\x12\x04\xb9\x03\x02.\x1a\xd8\x01\x20When\
    \x20enabled,\x20causes\x20tensor\x20allocation\x20information\x20to\x20b\
    e\x20included\x20in\n\x20the\x20error\x20message\x20when\x20the\x20Run()\
    \x20call\x20fails\x20because\x20the\x20allocator\x20ran\n\x20out\x20of\
    \x20memory\x20(OOM).\n\n\x20Enabling\x20this\x20option\x20can\x20slow\
    \x20down\x20the\x20Run()\x20call.\n\n\x0f\n\x05\x04\x06\x02\x05\x04\x12\
    \x06\xb9\x03\x02\xb2\x03!\n\r\n\x05\x04\x06\x02\x05\x05\x12\x04\xb9\x03\
    \x02\x06\n\r\n\x05\x04\x06\x02\x05\x01\x12\x04\xb9\x03\x07)\n\r\n\x05\
    \x04\x06\x02\x05\x03\x12\x04\xb9\x03,-\n\xab\x01\n\x04\x04\x06\x03\0\x12\
    \x06\xbe\x03\x02\xc4\x03\x03\x1a\x9a\x01\x20Everything\x20inside\x20Expe\
    rimental\x20is\x20subject\x20to\x20change\x20and\x20is\x20not\x20subject\
    \n\x20to\x20API\x20stability\x20guarantees\x20in\n\x20https://www.tensor\
    flow.org/guide/version_compat.\n\n\r\n\x05\x04\x06\x03\0\x01\x12\x04\xbe\
    \x03\n\x16\n\xec\x01\n\x06\x04\x06\x03\0\x02\0\x12\x04\xc3\x03\x04#\x1a\
    \xdb\x01\x20If\x20non-zero,\x20declares\x20that\x20this\x20graph\x20is\
    \x20going\x20to\x20use\x20collective\n\x20ops\x20and\x20must\x20synchron\
    ize\x20step_ids\x20with\x20any\x20other\x20graph\x20with\x20this\n\x20sa\
    me\x20group_key\x20value\x20(in\x20a\x20distributed\x20computation\x20wh\
    ere\x20tasks\n\x20run\x20disjoint\x20graphs).\n\n\x11\n\x07\x04\x06\x03\
    \0\x02\0\x04\x12\x06\xc3\x03\x04\xbe\x03\x18\n\x0f\n\x07\x04\x06\x03\0\
    \x02\0\x05\x12\x04\xc3\x03\x04\t\n\x0f\n\x07\x04\x06\x03\0\x02\0\x01\x12\
    \x04\xc3\x03\n\x1e\n\x0f\n\x07\x04\x06\x03\0\x02\0\x03\x12\x04\xc3\x03!\
    \"\n\x0c\n\x04\x04\x06\x02\x06\x12\x04\xc6\x03\x02\x20\n\x0f\n\x05\x04\
    \x06\x02\x06\x04\x12\x06\xc6\x03\x02\xc4\x03\x04\n\r\n\x05\x04\x06\x02\
    \x06\x06\x12\x04\xc6\x03\x02\x0e\n\r\n\x05\x04\x06\x02\x06\x01\x12\x04\
    \xc6\x03\x0f\x1b\n\r\n\x05\x04\x06\x02\x06\x03\x12\x04\xc6\x03\x1e\x1f\n\
    \x0b\n\x03\x04\x06\t\x12\x04\xc8\x03\x0b\r\n\x0c\n\x04\x04\x06\t\0\x12\
    \x04\xc8\x03\x0b\x0c\n\r\n\x05\x04\x06\t\0\x01\x12\x04\xc8\x03\x0b\x0c\n\
    \r\n\x05\x04\x06\t\0\x02\x12\x04\xc8\x03\x0b\x0c\nK\n\x02\x04\x07\x12\
    \x06\xcc\x03\0\xd7\x03\x01\x1a=\x20Metadata\x20output\x20(i.e.,\x20non-T\
    ensor)\x20for\x20a\x20single\x20Run()\x20call.\n\n\x0b\n\x03\x04\x07\x01\
    \x12\x04\xcc\x03\x08\x13\n\xbb\x01\n\x04\x04\x07\x02\0\x12\x04\xd0\x03\
    \x02\x1b\x1a\xac\x01\x20Statistics\x20traced\x20for\x20this\x20step.\x20\
    Populated\x20if\x20tracing\x20is\x20turned\x20on\x20via\x20the\n\x20\"Ru\
    nOptions\"\x20proto.\n\x20EXPERIMENTAL:\x20The\x20format\x20and\x20set\
    \x20of\x20events\x20may\x20change\x20in\x20future\x20versions.\n\n\x0f\n\
    \x05\x04\x07\x02\0\x04\x12\x06\xd0\x03\x02\xcc\x03\x15\n\r\n\x05\x04\x07\
    \x02\0\x06\x12\x04\xd0\x03\x02\x0b\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\
    \xd0\x03\x0c\x16\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xd0\x03\x19\x1a\nK\
    \n\x04\x04\x07\x02\x01\x12\x04\xd3\x03\x02\x1e\x1a=\x20The\x20cost\x20gr\
    aph\x20for\x20the\x20computation\x20defined\x20by\x20the\x20run\x20call.\
    \n\n\x0f\n\x05\x04\x07\x02\x01\x04\x12\x06\xd3\x03\x02\xd0\x03\x1b\n\r\n\
    \x05\x04\x07\x02\x01\x06\x12\x04\xd3\x03\x02\x0e\n\r\n\x05\x04\x07\x02\
    \x01\x01\x12\x04\xd3\x03\x0f\x19\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\
    \xd3\x03\x1c\x1d\n?\n\x04\x04\x07\x02\x02\x12\x04\xd6\x03\x02)\x1a1\x20G\
    raphs\x20of\x20the\x20partitions\x20executed\x20by\x20executors.\n\n\r\n\
    \x05\x04\x07\x02\x02\x04\x12\x04\xd6\x03\x02\n\n\r\n\x05\x04\x07\x02\x02\
    \x06\x12\x04\xd6\x03\x0b\x13\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xd6\
    \x03\x14$\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xd6\x03'(\nI\n\x02\x04\
    \x08\x12\x06\xda\x03\0\xe2\x03\x01\x1a;\x20Defines\x20a\x20connection\
    \x20between\x20two\x20tensors\x20in\x20a\x20`GraphDef`.\n\n\x0b\n\x03\
    \x04\x08\x01\x12\x04\xda\x03\x08\x18\nq\n\x04\x04\x08\x02\0\x12\x04\xdd\
    \x03\x02\x19\x1ac\x20A\x20tensor\x20name.\x20The\x20value\x20of\x20this\
    \x20tensor\x20will\x20be\x20substituted\x20for\n\x20the\x20tensor\x20nam\
    ed\x20in\x20`to_tensor`.\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xdd\x03\
    \x02\xda\x03\x1a\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xdd\x03\x02\x08\n\r\
    \n\x05\x04\x08\x02\0\x01\x12\x04\xdd\x03\t\x14\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\xdd\x03\x17\x18\ny\n\x04\x04\x08\x02\x01\x12\x04\xe1\x03\
    \x02\x17\x1ak\x20A\x20tensor\x20name.\x20The\x20value\x20of\x20this\x20t\
    ensor\x20will\x20be\x20bound\x20to\x20the\n\x20value\x20of\x20the\x20ten\
    sor\x20named\x20in\x20`from_tensor`.\n\n\x0f\n\x05\x04\x08\x02\x01\x04\
    \x12\x06\xe1\x03\x02\xdd\x03\x19\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\
    \xe1\x03\x02\x08\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xe1\x03\t\x12\n\r\
    \n\x05\x04\x08\x02\x01\x03\x12\x04\xe1\x03\x15\x16\n\xa9\x01\n\x02\x04\t\
    \x12\x06\xe8\x03\0\xbc\x04\x01\x1a\x9a\x01\x20Defines\x20a\x20subgraph\
    \x20in\x20another\x20`GraphDef`\x20as\x20a\x20set\x20of\x20feed\x20point\
    s\x20and\x20nodes\n\x20to\x20be\x20fetched\x20or\x20executed.\n\n\x20Com\
    pare\x20with\x20the\x20arguments\x20to\x20`Session::Run()`.\n\n\x0b\n\
    \x03\x04\t\x01\x12\x04\xe8\x03\x08\x17\nU\n\x04\x04\t\x02\0\x12\x04\xea\
    \x03\x02\x1b\x1aG\x20Tensors\x20to\x20be\x20fed\x20in\x20the\x20callable\
    .\x20Each\x20feed\x20is\x20the\x20name\x20of\x20a\x20tensor.\n\n\r\n\x05\
    \x04\t\x02\0\x04\x12\x04\xea\x03\x02\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\
    \xea\x03\x0b\x11\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xea\x03\x12\x16\n\r\n\
    \x05\x04\t\x02\0\x03\x12\x04\xea\x03\x19\x1a\n\xe2\x01\n\x04\x04\t\x02\
    \x01\x12\x04\xef\x03\x02\x1c\x1a\xd3\x01\x20Fetches.\x20A\x20list\x20of\
    \x20tensor\x20names.\x20The\x20caller\x20of\x20the\x20callable\x20expect\
    s\x20a\n\x20tensor\x20to\x20be\x20returned\x20for\x20each\x20fetch[i]\
    \x20(see\x20RunStepResponse.tensor).\x20The\n\x20order\x20of\x20specifie\
    d\x20fetches\x20does\x20not\x20change\x20the\x20execution\x20order.\n\n\
    \r\n\x05\x04\t\x02\x01\x04\x12\x04\xef\x03\x02\n\n\r\n\x05\x04\t\x02\x01\
    \x05\x12\x04\xef\x03\x0b\x11\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xef\x03\
    \x12\x17\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xef\x03\x1a\x1b\n\x88\x01\n\
    \x04\x04\t\x02\x02\x12\x04\xf3\x03\x02\x1d\x1az\x20Target\x20Nodes.\x20A\
    \x20list\x20of\x20node\x20names.\x20The\x20named\x20nodes\x20will\x20be\
    \x20run\x20by\x20the\n\x20callable\x20but\x20their\x20outputs\x20will\
    \x20not\x20be\x20returned.\n\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\xf3\x03\
    \x02\n\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\xf3\x03\x0b\x11\n\r\n\x05\x04\
    \t\x02\x02\x01\x12\x04\xf3\x03\x12\x18\n\r\n\x05\x04\t\x02\x02\x03\x12\
    \x04\xf3\x03\x1b\x1c\n9\n\x04\x04\t\x02\x03\x12\x04\xf6\x03\x02\x1d\x1a+\
    \x20Options\x20that\x20will\x20be\x20applied\x20to\x20each\x20run.\n\n\
    \x0f\n\x05\x04\t\x02\x03\x04\x12\x06\xf6\x03\x02\xf3\x03\x1d\n\r\n\x05\
    \x04\t\x02\x03\x06\x12\x04\xf6\x03\x02\x0c\n\r\n\x05\x04\t\x02\x03\x01\
    \x12\x04\xf6\x03\r\x18\n\r\n\x05\x04\t\x02\x03\x03\x12\x04\xf6\x03\x1b\
    \x1c\n\xb0\x01\n\x04\x04\t\x02\x04\x12\x04\xfb\x03\x022\x1a\xa1\x01\x20T\
    ensors\x20to\x20be\x20connected\x20in\x20the\x20callable.\x20Each\x20Ten\
    sorConnection\x20denotes\n\x20a\x20pair\x20of\x20tensors\x20in\x20the\
    \x20graph,\x20between\x20which\x20an\x20edge\x20will\x20be\x20created\n\
    \x20in\x20the\x20callable.\n\n\r\n\x05\x04\t\x02\x04\x04\x12\x04\xfb\x03\
    \x02\n\n\r\n\x05\x04\t\x02\x04\x06\x12\x04\xfb\x03\x0b\x1b\n\r\n\x05\x04\
    \t\x02\x04\x01\x12\x04\xfb\x03\x1c-\n\r\n\x05\x04\t\x02\x04\x03\x12\x04\
    \xfb\x0301\n\xb7\r\n\x04\x04\t\x02\x05\x12\x04\xac\x04\x02'\x1a\xa8\r\
    \x20The\x20Tensor\x20objects\x20fed\x20in\x20the\x20callable\x20and\x20f\
    etched\x20from\x20the\x20callable\n\x20are\x20expected\x20to\x20be\x20ba\
    cked\x20by\x20host\x20(CPU)\x20memory\x20by\x20default.\n\n\x20The\x20op\
    tions\x20below\x20allow\x20changing\x20that\x20-\x20feeding\x20tensors\
    \x20backed\x20by\n\x20device\x20memory,\x20or\x20returning\x20tensors\
    \x20that\x20are\x20backed\x20by\x20device\x20memory.\n\n\x20The\x20maps\
    \x20below\x20map\x20the\x20name\x20of\x20a\x20feed/fetch\x20tensor\x20(w\
    hich\x20appears\x20in\n\x20'feed'\x20or\x20'fetch'\x20fields\x20above),\
    \x20to\x20the\x20fully\x20qualified\x20name\x20of\x20the\x20device\n\x20\
    owning\x20the\x20memory\x20backing\x20the\x20contents\x20of\x20the\x20te\
    nsor.\n\n\x20For\x20example,\x20creating\x20a\x20callable\x20with\x20the\
    \x20following\x20options:\n\n\x20CallableOptions\x20{\n\x20\x20\x20feed:\
    \x20\"a:0\"\n\x20\x20\x20feed:\x20\"b:0\"\n\n\x20\x20\x20fetch:\x20\"x:0\
    \"\n\x20\x20\x20fetch:\x20\"y:0\"\n\n\x20\x20\x20feed_devices:\x20{\n\
    \x20\x20\x20\x20\x20\"a:0\":\x20\"/job:localhost/replica:0/task:0/device\
    :GPU:0\"\n\x20\x20\x20}\n\n\x20\x20\x20fetch_devices:\x20{\n\x20\x20\x20\
    \x20\x20\"y:0\":\x20\"/job:localhost/replica:0/task:0/device:GPU:0\"\n\
    \x20\x20}\n\x20}\n\n\x20means\x20that\x20the\x20Callable\x20expects:\n\
    \x20-\x20The\x20first\x20argument\x20(\"a:0\")\x20is\x20a\x20Tensor\x20b\
    acked\x20by\x20GPU\x20memory.\n\x20-\x20The\x20second\x20argument\x20(\"\
    b:0\")\x20is\x20a\x20Tensor\x20backed\x20by\x20host\x20memory.\n\x20and\
    \x20of\x20its\x20return\x20values:\n\x20-\x20The\x20first\x20output\x20(\
    \"x:0\")\x20will\x20be\x20backed\x20by\x20host\x20memory.\n\x20-\x20The\
    \x20second\x20output\x20(\"y:0\")\x20will\x20be\x20backed\x20by\x20GPU\
    \x20memory.\n\n\x20FEEDS:\n\x20It\x20is\x20the\x20responsibility\x20of\
    \x20the\x20caller\x20to\x20ensure\x20that\x20the\x20memory\x20of\x20the\
    \x20fed\n\x20tensors\x20will\x20be\x20correctly\x20initialized\x20and\
    \x20synchronized\x20before\x20it\x20is\n\x20accessed\x20by\x20operations\
    \x20executed\x20during\x20the\x20call\x20to\x20Session::RunCallable().\n\
    \n\x20This\x20is\x20typically\x20ensured\x20by\x20using\x20the\x20Tensor\
    Flow\x20memory\x20allocators\n\x20(Device::GetAllocator())\x20to\x20crea\
    te\x20the\x20Tensor\x20to\x20be\x20fed.\n\n\x20Alternatively,\x20for\x20\
    CUDA-enabled\x20GPU\x20devices,\x20this\x20typically\x20means\x20that\
    \x20the\n\x20operation\x20that\x20produced\x20the\x20contents\x20of\x20t\
    he\x20tensor\x20has\x20completed,\x20i.e.,\x20the\n\x20CUDA\x20stream\
    \x20has\x20been\x20synchronized\x20(e.g.,\x20via\x20cuCtxSynchronize()\
    \x20or\n\x20cuStreamSynchronize()).\n\n\x0f\n\x05\x04\t\x02\x05\x04\x12\
    \x06\xac\x04\x02\xfb\x032\n\r\n\x05\x04\t\x02\x05\x06\x12\x04\xac\x04\
    \x02\x15\n\r\n\x05\x04\t\x02\x05\x01\x12\x04\xac\x04\x16\"\n\r\n\x05\x04\
    \t\x02\x05\x03\x12\x04\xac\x04%&\n\x0c\n\x04\x04\t\x02\x06\x12\x04\xad\
    \x04\x02(\n\x0f\n\x05\x04\t\x02\x06\x04\x12\x06\xad\x04\x02\xac\x04'\n\r\
    \n\x05\x04\t\x02\x06\x06\x12\x04\xad\x04\x02\x15\n\r\n\x05\x04\t\x02\x06\
    \x01\x12\x04\xad\x04\x16#\n\r\n\x05\x04\t\x02\x06\x03\x12\x04\xad\x04&'\
    \n\xf5\x04\n\x04\x04\t\x02\x07\x12\x04\xb9\x04\x02\x1b\x1a\xe6\x04\x20By\
    \x20default,\x20RunCallable()\x20will\x20synchronize\x20the\x20GPU\x20st\
    ream\x20before\x20returning\n\x20fetched\x20tensors\x20on\x20a\x20GPU\
    \x20device,\x20to\x20ensure\x20that\x20the\x20values\x20in\x20those\x20t\
    ensors\n\x20have\x20been\x20produced.\x20This\x20simplifies\x20interacti\
    ng\x20with\x20the\x20tensors,\x20but\n\x20potentially\x20incurs\x20a\x20\
    performance\x20hit.\n\n\x20If\x20this\x20options\x20is\x20set\x20to\x20t\
    rue,\x20the\x20caller\x20is\x20responsible\x20for\x20ensuring\n\x20that\
    \x20the\x20values\x20in\x20the\x20fetched\x20tensors\x20have\x20been\x20\
    produced\x20before\x20they\x20are\n\x20used.\x20The\x20caller\x20can\x20\
    do\x20this\x20by\x20invoking\x20`Device::Sync()`\x20on\x20the\x20underly\
    ing\n\x20device(s),\x20or\x20by\x20feeding\x20the\x20tensors\x20back\x20\
    to\x20the\x20same\x20Session\x20using\n\x20`feed_devices`\x20with\x20the\
    \x20same\x20corresponding\x20device\x20name.\n\n\x0f\n\x05\x04\t\x02\x07\
    \x04\x12\x06\xb9\x04\x02\xad\x04(\n\r\n\x05\x04\t\x02\x07\x05\x12\x04\
    \xb9\x04\x02\x06\n\r\n\x05\x04\t\x02\x07\x01\x12\x04\xb9\x04\x07\x16\n\r\
    \n\x05\x04\t\x02\x07\x03\x12\x04\xb9\x04\x19\x1ab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
